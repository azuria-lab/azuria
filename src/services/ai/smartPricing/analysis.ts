/**
 * Analysis Module
 * Handles all types of analysis: basic, competition, market, and volume
 */

import { CompetitorPricing, PricingAnalysis } from '@/shared/types/ai';
import { competitorService } from '../competitorService';
import { pricingService } from '../pricingService';
import { CompetitorAnalysisResult, MarketAnalysisResult, SmartPricingInput, VolumeAnalysisResult } from './types';

/**
 * Realiza an√°lise b√°sica de precifica√ß√£o considerando custos e impostos
 * 
 * Analisa o pre√ßo ideal baseado em custo, margem desejada e regime tribut√°rio,
 * fornecendo breakdown completo de impostos e margem real.
 * 
 * @param input - Dados de entrada incluindo custo e informa√ß√µes do neg√≥cio
 * @returns An√°lise completa com pre√ßo sugerido, impostos e margem efetiva
 * 
 * @example
 * ```typescript
 * const input: SmartPricingInput = {
 *   costPrice: 50.00,
 *   desiredMargin: 40,
 *   businessInfo: {
 *     taxRegime: 'simples_nacional',
 *     businessType: 'comercio',
 *     averageMargin: 30
 *   }
 * };
 * 
 * const analysis = await performBasicAnalysis(input);
 * console.log(`Pre√ßo sugerido: R$ ${analysis.suggestedPrice.toFixed(2)}`);
 * console.log(`Margem efetiva: ${analysis.effectiveMargin}%`);
 * console.log(`Impostos: R$ ${analysis.taxes.toFixed(2)}`);
 * ```
 * 
 * @remarks
 * **Valores padr√£o aplicados**:
 * - Se `desiredMargin` n√£o fornecida: usa `businessInfo.averageMargin`
 * - Se `businessInfo` n√£o fornecida: 
 *   * taxRegime: 'simples_nacional'
 *   * businessType: 'comercio'
 *   * averageMargin: 30%
 * 
 * **C√°lculos realizados**:
 * 1. Aplica regime tribut√°rio (Simples, Presumido, Real)
 * 2. Calcula impostos sobre venda
 * 3. Determina pre√ßo para atingir margem desejada
 * 4. Calcula margem efetiva real
 * 
 * **Usa pricingService.analyzePricing()** internamente para c√°lculos tribut√°rios
 */
export async function performBasicAnalysis(input: SmartPricingInput): Promise<PricingAnalysis> {
  const businessInfo = input.businessInfo || {
    taxRegime: 'simples_nacional',
    businessType: 'comercio',
    averageMargin: 30
  };

  return await pricingService.analyzePricing({
    costPrice: input.costPrice,
    desiredMargin: input.desiredMargin || businessInfo.averageMargin,
    taxRegime: businessInfo.taxRegime,
    businessType: businessInfo.businessType
  });
}

/**
 * Analisa concorr√™ncia para o produto no mercado
 * 
 * Busca pre√ßos de concorrentes e calcula estat√≠sticas competitivas incluindo
 * pre√ßo m√©dio, faixa de pre√ßos e posicionamento competitivo.
 * 
 * @param productName - Nome do produto para buscar concorrentes
 * @returns An√°lise competitiva completa ou resultado vazio se sem dados
 * 
 * @example
 * ```typescript
 * const analysis = await analyzeCompetition('iPhone 15 Pro 256GB');
 * 
 * if (analysis.competitivePosition !== 'sem_dados') {
 *   console.log(`Concorrentes encontrados: ${analysis.competitors.length}`);
 *   console.log(`Pre√ßo m√©dio: R$ ${analysis.averagePrice.toFixed(2)}`);
 *   console.log(`Faixa: R$ ${analysis.priceRange.min} - R$ ${analysis.priceRange.max}`);
 *   console.log(`Posi√ß√£o: ${analysis.competitivePosition}`);
 *   
 *   // Listar concorrentes
 *   analysis.competitors.forEach(comp => {
 *     console.log(`${comp.competitor}: R$ ${comp.price}`);
 *   });
 * } else {
 *   console.log('Sem dados de concorr√™ncia dispon√≠veis');
 * }
 * ```
 * 
 * @remarks
 * **Retorno quando sem dados**:
 * ```typescript
 * {
 *   competitors: [],
 *   averagePrice: 0,
 *   priceRange: { min: 0, max: 0 },
 *   competitivePosition: 'sem_dados'
 * }
 * ```
 * 
 * **Posicionamento competitivo** (determinado por `determineCompetitivePosition`):
 * - **'mercado_uniforme'**: Pre√ßos muito pr√≥ximos (varia√ß√£o < 10% da m√©dia)
 * - **'mercado_segmentado'**: Grande dispers√£o de pre√ßos (m√°x > 150% da m√©dia)
 * - **'mercado_competitivo'**: Dispers√£o moderada de pre√ßos
 * - **'sem_dados'**: Nenhum concorrente encontrado
 * 
 * **C√°lculos realizados**:
 * 1. Busca concorrentes via `competitorService.analyzeCompetitors()`
 * 2. Extrai pre√ßos de todos os concorrentes
 * 3. Calcula m√©dia, m√≠nimo e m√°ximo
 * 4. Determina posicionamento baseado em dispers√£o
 * 
 * **Uso t√≠pico**: Comparar seu pre√ßo proposto com o mercado
 */
export async function analyzeCompetition(productName: string): Promise<CompetitorAnalysisResult> {
  const competitors = await competitorService.analyzeCompetitors(productName);
  
  if (competitors.length === 0) {
    return {
      competitors: [],
      averagePrice: 0,
      priceRange: { min: 0, max: 0 },
      competitivePosition: 'sem_dados'
    };
  }

  const prices = competitors.map((c: CompetitorPricing) => c.price);
  const averagePrice = prices.reduce((sum: number, price: number) => sum + price, 0) / prices.length;
  const minPrice = Math.min(...prices);
  const maxPrice = Math.max(...prices);

  return {
    competitors,
    averagePrice,
    priceRange: { min: minPrice, max: maxPrice },
    competitivePosition: determineCompetitivePosition(averagePrice, minPrice, maxPrice)
  };
}

/**
 * Analisa fatores de mercado que influenciam o pre√ßo
 * 
 * Calcula multiplicadores baseados em sazonalidade, p√∫blico-alvo e categoria
 * do produto, fornecendo insights estrat√©gicos para precifica√ß√£o.
 * 
 * @param input - Dados de entrada incluindo sazonalidade, p√∫blico e categoria
 * @returns Multiplicadores calculados e insights de mercado
 * 
 * @example
 * ```typescript
 * const input: SmartPricingInput = {
 *   costPrice: 100,
 *   seasonality: 'high',      // Alta sazonalidade (Natal, Black Friday)
 *   targetAudience: 'b2b',    // P√∫blico empresarial
 *   category: 'beleza'        // Categoria beleza
 * };
 * 
 * const market = analyzeMarketFactors(input);
 * 
 * console.log('Multiplicadores:');
 * console.log(`Sazonalidade: ${market.seasonalityMultiplier}x`);  // 1.15
 * console.log(`P√∫blico: ${market.audienceMultiplier}x`);          // 1.2
 * console.log(`Categoria: ${market.categoryMultiplier}x`);        // 1.15
 * 
 * const totalMultiplier = 
 *   market.seasonalityMultiplier * 
 *   market.audienceMultiplier * 
 *   market.categoryMultiplier;
 * console.log(`Total: ${totalMultiplier.toFixed(3)}x`);           // ~1.587x
 * 
 * // Insights estrat√©gicos
 * market.insights.forEach(insight => console.log(`üí° ${insight}`));
 * // Output:
 * // üí° Produto com alta sazonalidade - aproveite os picos de demanda
 * // üí° Mercado B2B permite margens maiores e foco em valor agregado
 * ```
 * 
 * @remarks
 * **Multiplicadores de sazonalidade**:
 * - **high** (1.15): Produtos com sazonalidade forte (decora√ß√£o natalina, volta √†s aulas)
 * - **medium** (1.05): Sazonalidade moderada (roupas de ver√£o/inverno)
 * - **low** (1.0): Produtos de demanda constante (alimentos b√°sicos)
 * 
 * **Multiplicadores de p√∫blico**:
 * - **B2B** (1.2): Empresas toleram pre√ßos maiores, focam em valor e ROI
 * - **B2C** (1.0): Consumidores finais, mais sens√≠veis a pre√ßo
 * 
 * **Multiplicadores por categoria**:
 * - **beleza** (1.15): Alta margem, valor percebido elevado
 * - **moda** (1.1): Margem boa, branding importante
 * - **esporte** (1.08): Margem moderada-alta
 * - **casa** (1.05): Margem moderada
 * - **eletronicos** (0.95): Margem comprimida, alta competi√ß√£o
 * - **default** (1.0): Categoria n√£o especificada
 * 
 * **Insights gerados**:
 * - Alertas sobre alta sazonalidade
 * - Orienta√ß√µes sobre B2B vs B2C
 * - Automaticamente inclu√≠dos quando condi√ß√µes s√£o atendidas
 * 
 * **Valores padr√£o**:
 * - seasonality: 'medium' ‚Üí multiplier 1.05
 * - targetAudience: 'b2c' ‚Üí multiplier 1.0
 * - category: 'default' ‚Üí multiplier 1.0
 */
export function analyzeMarketFactors(input: SmartPricingInput): MarketAnalysisResult {
  const insights: string[] = [];
  
  // Seasonality multiplier
  const seasonalityMultipliers = {
    high: 1.15,
    medium: 1.05,
    low: 1.0
  };
  const seasonalityMultiplier = seasonalityMultipliers[input.seasonality || 'medium'];
  
  if (input.seasonality === 'high') {
    insights.push('Produto com alta sazonalidade - aproveite os picos de demanda');
  }

  // Target audience multiplier
  const audienceMultipliers = {
    b2b: 1.2,
    b2c: 1.0
  };
  const audienceMultiplier = audienceMultipliers[input.targetAudience || 'b2c'];
  
  if (input.targetAudience === 'b2b') {
    insights.push('Mercado B2B permite margens maiores e foco em valor agregado');
  }

  // Category multiplier
  const categoryMultipliers: Record<string, number> = {
    eletronicos: 0.95,
    moda: 1.1,
    casa: 1.05,
    esporte: 1.08,
    beleza: 1.15,
    default: 1.0
  };
  const categoryMultiplier = categoryMultipliers[input.category || 'default'];

  return {
    seasonalityMultiplier,
    audienceMultiplier,
    categoryMultiplier,
    insights
  };
}

/**
 * Analisa volume de vendas e elasticidade de pre√ßo
 * 
 * Calcula scores baseados no volume mensal de vendas e n√≠vel de estoque,
 * determinando o impacto na estrat√©gia de precifica√ß√£o.
 * 
 * @param input - Dados incluindo volume mensal e estoque dispon√≠vel
 * @returns Scores de volume/elasticidade e insights acion√°veis
 * 
 * @example
 * ```typescript
 * // Cen√°rio 1: Alto volume, estoque alto
 * const highVolumeInput: SmartPricingInput = {
 *   costPrice: 50,
 *   monthlyVolume: 150,  // Alto volume
 *   inventory: 600       // Alto estoque
 * };
 * 
 * const analysis1 = analyzeVolumeElasticity(highVolumeInput);
 * console.log(`Volume score: ${analysis1.volumeScore}`);           // 1.05
 * console.log(`Elasticity: ${analysis1.elasticityFactor}`);        // 0.98
 * analysis1.volumeInsights.forEach(i => console.log(`üí° ${i}`));
 * // Output:
 * // üí° Alto volume de vendas sustenta pre√ßos premium
 * // üí° Alto estoque - considere estrat√©gias para acelerar vendas
 * 
 * // Cen√°rio 2: Baixo volume, estoque baixo
 * const lowVolumeInput: SmartPricingInput = {
 *   costPrice: 50,
 *   monthlyVolume: 10,   // Baixo volume
 *   inventory: 30        // Baixo estoque
 * };
 * 
 * const analysis2 = analyzeVolumeElasticity(lowVolumeInput);
 * console.log(`Volume score: ${analysis2.volumeScore}`);           // 0.95
 * console.log(`Elasticity: ${analysis2.elasticityFactor}`);        // 1.02
 * analysis2.volumeInsights.forEach(i => console.log(`üí° ${i}`));
 * // Output:
 * // üí° Volume baixo - considere pre√ßos mais agressivos para aumentar vendas
 * // üí° Estoque baixo - oportunidade para pre√ßos premium
 * ```
 * 
 * @remarks
 * **Volume Score** (baseado em `monthlyVolume`):
 * - **Alto volume** (> 100 unidades/m√™s): 
 *   * Score: 1.05
 *   * Insight: "Alto volume sustenta pre√ßos premium"
 *   * Estrat√©gia: Manter ou aumentar pre√ßo, volume compensa
 * 
 * - **Volume moderado** (20-100 unidades/m√™s):
 *   * Score: 1.0 (neutro)
 *   * Sem insight espec√≠fico
 *   * Estrat√©gia: Balanceada
 * 
 * - **Baixo volume** (< 20 unidades/m√™s):
 *   * Score: 0.95
 *   * Insight: "Considere pre√ßos mais agressivos"
 *   * Estrat√©gia: Reduzir pre√ßo para estimular demanda
 * 
 * **Elasticity Factor** (baseado em `inventory`):
 * - **Alto estoque** (> 500 unidades):
 *   * Factor: 0.98 (press√£o para reduzir pre√ßo)
 *   * Insight: "Considere estrat√©gias para acelerar vendas"
 *   * Estrat√©gia: Promo√ß√µes, descontos, liquida√ß√£o
 * 
 * - **Estoque moderado** (50-500 unidades):
 *   * Factor: 1.0 (neutro)
 *   * Sem insight espec√≠fico
 *   * Estrat√©gia: Normal
 * 
 * - **Baixo estoque** (< 50 unidades):
 *   * Factor: 1.02 (permite aumentar pre√ßo)
 *   * Insight: "Oportunidade para pre√ßos premium"
 *   * Estrat√©gia: Aumentar pre√ßo, estoque limitado cria urg√™ncia
 * 
 * **Se n√£o fornecido**:
 * - Sem `monthlyVolume`: volumeScore = 1.0
 * - Sem `inventory`: elasticityFactor = 1.0
 * 
 * **Uso no c√°lculo final**:
 * ```typescript
 * finalPrice = basePrice * volumeScore * elasticityFactor;
 * ```
 */
export function analyzeVolumeElasticity(input: SmartPricingInput): VolumeAnalysisResult {
  const insights: string[] = [];
  
  // Volume score
  let volumeScore = 1.0;
  if (input.monthlyVolume) {
    if (input.monthlyVolume > 100) {
      volumeScore = 1.05;
      insights.push('Alto volume de vendas sustenta pre√ßos premium');
    } else if (input.monthlyVolume < 20) {
      volumeScore = 0.95;
      insights.push('Volume baixo - considere pre√ßos mais agressivos para aumentar vendas');
    }
  }

  // Elasticity factor based on inventory
  let elasticityFactor = 1.0;
  if (input.inventory) {
    if (input.inventory > 500) {
      elasticityFactor = 0.98;
      insights.push('Alto estoque - considere estrat√©gias para acelerar vendas');
    } else if (input.inventory < 50) {
      elasticityFactor = 1.02;
      insights.push('Estoque baixo - oportunidade para pre√ßos premium');
    }
  }

  return {
    volumeScore,
    elasticityFactor,
    volumeInsights: insights
  };
}

/**
 * Determina o posicionamento competitivo no mercado
 * 
 * Analisa a dispers√£o de pre√ßos entre concorrentes para classificar
 * o tipo de mercado e orientar estrat√©gia de precifica√ß√£o.
 * 
 * @param avg - Pre√ßo m√©dio dos concorrentes
 * @param min - Pre√ßo m√≠nimo encontrado
 * @param max - Pre√ßo m√°ximo encontrado
 * @returns Classifica√ß√£o do mercado como string
 * 
 * @example
 * ```typescript
 * // Mercado uniforme - pre√ßos muito pr√≥ximos
 * const pos1 = determineCompetitivePosition(100, 95, 105);
 * console.log(pos1); // 'mercado_uniforme'
 * // Estrat√©gia: Pouca margem para diferencia√ß√£o por pre√ßo
 * 
 * // Mercado competitivo - dispers√£o moderada
 * const pos2 = determineCompetitivePosition(100, 80, 130);
 * console.log(pos2); // 'mercado_competitivo'
 * // Estrat√©gia: Espa√ßo para posicionamento intermedi√°rio
 * 
 * // Mercado segmentado - grande dispers√£o
 * const pos3 = determineCompetitivePosition(100, 50, 200);
 * console.log(pos3); // 'mercado_segmentado'
 * // Estrat√©gia: M√∫ltiplos segmentos (economia, intermedi√°rio, premium)
 * ```
 * 
 * @remarks
 * **Classifica√ß√µes poss√≠veis**:
 * 
 * **1. 'mercado_uniforme'**:
 * - Condi√ß√£o: `(max - min) < avg * 0.1`
 * - Significa: Varia√ß√£o de pre√ßos < 10% da m√©dia
 * - Exemplo: M√©dia R$ 100, varia√ß√£o R$ 95-105 (R$ 10 = 10%)
 * - Caracter√≠sticas:
 *   * Commodities ou produtos padronizados
 *   * Competi√ß√£o principalmente por servi√ßo/entrega
 *   * Pouca margem para diferencia√ß√£o por pre√ßo
 *   * Guerra de pre√ßos destrutiva
 * - Estrat√©gia sugerida:
 *   * Diferenciar por servi√ßo, marca, conveni√™ncia
 *   * Manter pre√ßo pr√≥ximo √† m√©dia
 *   * Focar em efici√™ncia operacional
 * 
 * **2. 'mercado_segmentado'**:
 * - Condi√ß√£o: `max > avg * 1.5`
 * - Significa: Pre√ßo m√°ximo > 150% da m√©dia
 * - Exemplo: M√©dia R$ 100, m√°ximo R$ 160+ (60%+ acima)
 * - Caracter√≠sticas:
 *   * M√∫ltiplos segmentos de mercado (baixo/m√©dio/alto)
 *   * Diferencia√ß√£o clara de qualidade/marca
 *   * P√∫blico com diferentes disposi√ß√µes a pagar
 *   * Espa√ßo para posicionamento premium
 * - Estrat√©gia sugerida:
 *   * Escolher segmento alvo claramente
 *   * Construir proposta de valor espec√≠fica
 *   * Premium: foco em qualidade/exclusividade
 *   * Economia: foco em custo/volume
 * 
 * **3. 'mercado_competitivo'** (default):
 * - Condi√ß√£o: N√£o √© uniforme nem segmentado
 * - Significa: Dispers√£o moderada de pre√ßos
 * - Exemplo: M√©dia R$ 100, varia√ß√£o R$ 80-130
 * - Caracter√≠sticas:
 *   * Competi√ß√£o saud√°vel
 *   * Espa√ßo para diferencia√ß√£o
 *   * M√∫ltiplas estrat√©gias vi√°veis
 *   * Equil√≠brio entre pre√ßo e valor
 * - Estrat√©gia sugerida:
 *   * Posicionamento intermedi√°rio flex√≠vel
 *   * Ajustar conforme proposta de valor
 *   * Monitorar concorrentes ativamente
 * 
 * **Uso t√≠pico**:
 * Chamada internamente por `analyzeCompetition()` para classificar
 * o mercado e orientar recomenda√ß√µes de pre√ßo.
 */
function determineCompetitivePosition(avg: number, min: number, max: number): string {
  const range = max - min;
  if (range < avg * 0.1) {
    return 'mercado_uniforme';
  }
  if (max > avg * 1.5) {
    return 'mercado_segmentado';
  }
  return 'mercado_competitivo';
}
