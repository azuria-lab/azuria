/**
 * Recommendation Module
 * Generates smart pricing recommendations with reasoning
 */

import { PricingAnalysis } from '@/shared/types/ai';
import { adjustPriceForCompetition, calculateFinalPrice, calculateMargin, getPositionDescription, roundToNicePrice } from './calculation';
import { CompetitorAnalysisResult, MarketAnalysisResult, SmartPricingInput, SmartPricingRecommendation, VolumeAnalysisResult } from './types';

/**
 * Gera recomenda√ß√£o inteligente de precifica√ß√£o completa
 * 
 * Combina an√°lises de custos, concorr√™ncia, mercado e volume para produzir
 * uma recomenda√ß√£o final de pre√ßo com reasoning detalhado, alternativas,
 * avisos e otimiza√ß√µes.
 * 
 * @param basicAnalysis - An√°lise b√°sica de custos e impostos
 * @param competitorAnalysis - An√°lise de concorrentes e posicionamento
 * @param marketAnalysis - An√°lise de fatores de mercado (sazonalidade, etc.)
 * @param volumeAnalysis - An√°lise de volume e elasticidade
 * @param input - Dados originais de entrada
 * @returns Recomenda√ß√£o completa com pre√ßo, confian√ßa, reasoning e alternativas
 * 
 * @example
 * ```typescript
 * // Combinar todas as an√°lises
 * const basicAnalysis = await performBasicAnalysis(input);
 * const competitorAnalysis = await analyzeCompetition(input.productName);
 * const marketAnalysis = analyzeMarketFactors(input);
 * const volumeAnalysis = analyzeVolumeElasticity(input);
 * 
 * const recommendation = generateSmartRecommendation(
 *   basicAnalysis,
 *   competitorAnalysis,
 *   marketAnalysis,
 *   volumeAnalysis,
 *   input
 * );
 * 
 * console.log(`üí∞ Pre√ßo recomendado: R$ ${recommendation.recommendedPrice.toFixed(2)}`);
 * console.log(`üéØ Confian√ßa: ${recommendation.confidence}%`);
 * 
 * // Reasoning detalhado
 * console.log('\nüìã Reasoning:');
 * recommendation.reasoning.forEach(r => console.log(r));
 * // Output:
 * // üí∞ Pre√ßo base calculado: R$ 85.50
 * // üîç Pre√ßo m√©dio dos concorrentes: R$ 89.00
 * // üìä Posicionamento: Competitivo
 * // üí° Margem l√≠quida estimada: 42.0%
 * 
 * // Alternativas
 * console.log('\nüîÄ Alternativas:');
 * recommendation.alternatives.forEach(alt => {
 *   console.log(`${alt.scenario}: R$ ${alt.price.toFixed(2)}`);
 *   console.log(`  Pr√≥s: ${alt.pros.join(', ')}`);
 * });
 * 
 * // Avisos
 * if (recommendation.warnings.length > 0) {
 *   console.log('\n‚ö†Ô∏è Avisos:');
 *   recommendation.warnings.forEach(w => console.log(w));
 * }
 * 
 * // Otimiza√ß√µes
 * console.log('\nüöÄ Otimiza√ß√µes sugeridas:');
 * recommendation.optimizations.forEach(o => console.log(o));
 * ```
 * 
 * @remarks
 * **Pipeline de c√°lculo**:
 * 1. **Base**: Pega pre√ßo do basicAnalysis (custo + impostos + margem)
 * 2. **Ajustes de mercado**: Aplica multiplicadores de marketAnalysis
 * 3. **Ajustes de volume**: Aplica scores de volumeAnalysis
 * 4. **Ajuste competitivo**: Compara com competitorAnalysis e ajusta
 * 5. **Arredondamento**: Aplica roundToNicePrice() para pre√ßo psicol√≥gico
 * 
 * **Componentes da recomenda√ß√£o**:
 * - **recommendedPrice**: Pre√ßo final calculado (arredondado)
 * - **confidence**: 0-100% baseado em dados dispon√≠veis
 * - **reasoning**: 5-8 pontos explicando o pre√ßo
 * - **alternatives**: 3 cen√°rios (competitivo -10%, premium +10%, penetra√ß√£o -20%)
 * - **warnings**: Alertas sobre margem baixa, pre√ßo alto, volume baixo
 * - **optimizations**: 5-7 sugest√µes acion√°veis
 * 
 * **Confian√ßa calculada**:
 * - Base: 60%
 * - +10% se tem dados de concorrentes
 * - +10% se tem volume hist√≥rico
 * - +10% se tem inventory data
 * - +10% se mercado √© uniforme/competitivo
 * - M√°ximo: 100%
 * 
 * **Uso t√≠pico**:
 * Esta √© a fun√ß√£o principal do SmartPricingService - consolida todas
 * as an√°lises anteriores em uma recomenda√ß√£o final execut√°vel.
 */
export function generateSmartRecommendation(
  basicAnalysis: PricingAnalysis,
  competitorAnalysis: CompetitorAnalysisResult,
  marketAnalysis: MarketAnalysisResult,
  volumeAnalysis: VolumeAnalysisResult,
  input: SmartPricingInput
): SmartPricingRecommendation {
  
  const basePrice = basicAnalysis.suggestedPrice;
  
  const calculatedPrice = calculateFinalPrice(basePrice, marketAnalysis, volumeAnalysis);
  
  const { price: adjustedPrice, confidence } = adjustPriceForCompetition(
    calculatedPrice,
    competitorAnalysis
  );

  const finalPrice = roundToNicePrice(adjustedPrice);

  const reasoning = generateReasoning(
    basicAnalysis,
    competitorAnalysis,
    marketAnalysis,
    volumeAnalysis,
    finalPrice,
    input
  );

  const alternatives = generateAlternatives(finalPrice, input);

  const warnings = generateWarnings(finalPrice, input, competitorAnalysis);
  const optimizations = generateOptimizations(input, competitorAnalysis);

  return {
    recommendedPrice: finalPrice,
    confidence,
    reasoning,
    alternatives,
    warnings,
    optimizations
  };
}

/**
 * Gera reasoning (racioc√≠nio) detalhado para o pre√ßo recomendado
 * 
 * Explica passo a passo como o pre√ßo foi calculado, incluindo base de custo,
 * compara√ß√£o com concorrentes, fatores de mercado e margem final.
 * 
 * @param basicAnalysis - An√°lise b√°sica com pre√ßo base
 * @param competitorAnalysis - Dados de concorrentes
 * @param marketAnalysis - Insights de mercado
 * @param volumeAnalysis - Insights de volume
 * @param finalPrice - Pre√ßo final calculado
 * @param input - Dados originais de entrada
 * @returns Array de strings explicando o pre√ßo
 * 
 * @example
 * ```typescript
 * const reasoning = generateReasoning(
 *   basicAnalysis,
 *   competitorAnalysis,
 *   marketAnalysis,
 *   volumeAnalysis,
 *   89.90,
 *   input
 * );
 * 
 * reasoning.forEach(line => console.log(line));
 * // Output t√≠pico:
 * // üí∞ Pre√ßo base calculado: R$ 85.50 (custo + impostos + margem)
 * // üîç Pre√ßo m√©dio dos concorrentes: R$ 89.00
 * // üìä Posicionamento: Competitivo
 * // üìà Produto com alta sazonalidade - aproveite os picos de demanda
 * // üìä Alto volume de vendas sustenta pre√ßos premium
 * // üí° Margem l√≠quida estimada: 42.0%
 * ```
 * 
 * @remarks
 * **Estrutura do reasoning** (5-8 pontos):
 * 
 * 1. **Pre√ßo base** (sempre):
 *    - "üí∞ Pre√ßo base calculado: R$ X.XX (custo + impostos + margem)"
 * 
 * 2. **Compara√ß√£o competitiva** (se houver concorrentes):
 *    - "üîç Pre√ßo m√©dio dos concorrentes: R$ X.XX"
 *    - "üìä Posicionamento: [Abaixo/Competitivo/Premium]"
 * 
 * 3. **Insights de mercado** (se houver):
 *    - Cada insight do marketAnalysis com emoji üìà
 *    - Exemplos: sazonalidade, p√∫blico B2B, categoria
 * 
 * 4. **Insights de volume** (se houver):
 *    - Cada insight do volumeAnalysis com emoji üìä
 *    - Exemplos: alto/baixo volume, estoque
 * 
 * 5. **Margem final** (sempre):
 *    - "üí° Margem l√≠quida estimada: X.X%"
 *    - Calculada: ((finalPrice - costPrice) / finalPrice) * 100
 * 
 * **Uso de emojis**:
 * - üí∞ Pre√ßo/dinheiro
 * - üîç An√°lise/pesquisa
 * - üìä Dados/estat√≠sticas
 * - üìà Crescimento/mercado
 * - üí° Insight/conclus√£o
 * 
 * **Chamada interna**:
 * Usado por `generateSmartRecommendation()` para criar campo `reasoning`
 */
function generateReasoning(
  basicAnalysis: PricingAnalysis,
  competitorAnalysis: CompetitorAnalysisResult,
  marketAnalysis: MarketAnalysisResult,
  volumeAnalysis: VolumeAnalysisResult,
  finalPrice: number,
  input: SmartPricingInput
): string[] {
  const reasoning: string[] = [];
  
  reasoning.push(`üí∞ Pre√ßo base calculado: R$ ${basicAnalysis.suggestedPrice.toFixed(2)} (custo + impostos + margem)`);
  
  if (competitorAnalysis.competitors.length > 0) {
    reasoning.push(`üîç Pre√ßo m√©dio dos concorrentes: R$ ${competitorAnalysis.averagePrice.toFixed(2)}`);
    reasoning.push(`üìä Posicionamento: ${getPositionDescription(finalPrice, competitorAnalysis.averagePrice)}`);
  }

  if (marketAnalysis.insights.length > 0) {
    reasoning.push(...marketAnalysis.insights.map((insight: string) => `üìà ${insight}`));
  }

  if (volumeAnalysis.volumeInsights.length > 0) {
    reasoning.push(...volumeAnalysis.volumeInsights.map((insight: string) => `üìä ${insight}`));
  }

  const margin = calculateMargin(finalPrice, input.costPrice);
  reasoning.push(`üí° Margem l√≠quida estimada: ${margin.toFixed(1)}%`);

  return reasoning;
}

/**
 * Gera cen√°rios alternativos de precifica√ß√£o
 * 
 * Cria 3 estrat√©gias alternativas ao pre√ßo base: competitivo (-10%),
 * premium (+10%) e penetra√ß√£o (-20%), cada um com pr√≥s e contras.
 * 
 * @param basePrice - Pre√ßo base calculado
 * @param _input - Dados de entrada (reservado para uso futuro)
 * @returns Array com 3 cen√°rios alternativos
 * 
 * @example
 * ```typescript
 * const alternatives = generateAlternatives(100.00, input);
 * 
 * alternatives.forEach(alt => {
 *   console.log(`\n${alt.scenario}`);
 *   console.log(`Pre√ßo: R$ ${alt.price.toFixed(2)}`);
 *   console.log('Pr√≥s:', alt.pros.join(' | '));
 *   console.log('Contras:', alt.cons.join(' | '));
 * });
 * 
 * // Output:
 * // Pre√ßo Competitivo (-10%)
 * // Pre√ßo: R$ 90.00
 * // Pr√≥s: Maior volume de vendas | Melhor posicionamento vs concorrentes | ...
 * // Contras: Menor margem de lucro | Pode criar guerra de pre√ßos | ...
 * 
 * // Pre√ßo Premium (+10%)
 * // Pre√ßo: R$ 110.00
 * // Pr√≥s: Maior margem de lucro | Posicionamento de qualidade | ...
 * // Contras: Menor volume potencial | Exige melhor diferencia√ß√£o | ...
 * 
 * // Estrat√©gia Penetra√ß√£o (-20%)
 * // Pre√ßo: R$ 80.00
 * // Pr√≥s: Conquista r√°pida de mercado | Alto volume | ...
 * // Contras: Margem muito baixa | Dif√≠cil aumentar pre√ßo depois | ...
 * ```
 * 
 * @remarks
 * **Cen√°rio 1: Competitivo (-10%)**:
 * - Pre√ßo: basePrice * 0.9
 * - Estrat√©gia: Ganhar market share rapidamente
 * - **Pr√≥s**:
 *   * Maior volume de vendas
 *   * Melhor posicionamento vs concorrentes
 *   * Entrada r√°pida no mercado
 * - **Contras**:
 *   * Menor margem de lucro
 *   * Pode criar guerra de pre√ßos
 *   * Menos recursos para marketing
 * - **Quando usar**: Entrada em mercado novo, alta competi√ß√£o
 * 
 * **Cen√°rio 2: Premium (+10%)**:
 * - Pre√ßo: basePrice * 1.1
 * - Estrat√©gia: Posicionamento de qualidade/exclusividade
 * - **Pr√≥s**:
 *   * Maior margem de lucro
 *   * Posicionamento de qualidade
 *   * Mais recursos para investimento
 * - **Contras**:
 *   * Menor volume potencial
 *   * Exige melhor diferencia√ß√£o
 *   * Competi√ß√£o com marcas estabelecidas
 * - **Quando usar**: Produto diferenciado, marca forte, p√∫blico B2B
 * 
 * **Cen√°rio 3: Penetra√ß√£o (-20%)**:
 * - Pre√ßo: basePrice * 0.8
 * - Estrat√©gia: Conquistar mercado agressivamente
 * - **Pr√≥s**:
 *   * Conquista r√°pida de mercado
 *   * Alto volume
 *   * Barreira √† entrada de concorrentes
 * - **Contras**:
 *   * Margem muito baixa
 *   * Dif√≠cil aumentar pre√ßo depois
 *   * Risco de preju√≠zo
 * - **Quando usar**: Lan√ßamento de produto, liquida√ß√£o, alta sazonalidade
 * 
 * **Arredondamento**:
 * Todos os pre√ßos s√£o arredondados com `roundToNicePrice()` para
 * valores psicologicamente atrativos (ex: R$ 89.90 em vez de R$ 89.73)
 * 
 * **Par√¢metro _input**:
 * Prefixado com `_` porque n√£o √© usado atualmente, mas est√° na assinatura
 * para futuras personaliza√ß√µes (ex: ajustar % baseado em categoria)
 */
function generateAlternatives(basePrice: number, _input: SmartPricingInput) {
  return [
    {
      price: roundToNicePrice(basePrice * 0.9),
      scenario: 'Pre√ßo Competitivo (-10%)',
      pros: ['Maior volume de vendas', 'Melhor posicionamento vs concorrentes', 'Entrada r√°pida no mercado'],
      cons: ['Menor margem de lucro', 'Pode criar guerra de pre√ßos', 'Menos recursos para marketing']
    },
    {
      price: roundToNicePrice(basePrice * 1.1),
      scenario: 'Pre√ßo Premium (+10%)',
      pros: ['Maior margem de lucro', 'Posicionamento de qualidade', 'Mais recursos para investimento'],
      cons: ['Menor volume potencial', 'Exige melhor diferencia√ß√£o', 'Competi√ß√£o com marcas estabelecidas']
    },
    {
      price: roundToNicePrice(basePrice * 0.8),
      scenario: 'Estrat√©gia Penetra√ß√£o (-20%)',
      pros: ['Conquista r√°pida de mercado', 'Alto volume', 'Barreira √† entrada de concorrentes'],
      cons: ['Margem muito baixa', 'Dif√≠cil aumentar pre√ßo depois', 'Risco de preju√≠zo']
    }
  ];
}

/**
 * Gera avisos sobre poss√≠veis problemas no pre√ßo recomendado
 * 
 * Identifica riscos como margem muito baixa, pre√ßo muito acima da concorr√™ncia
 * ou volume insuficiente, alertando o usu√°rio para cuidados especiais.
 * 
 * @param price - Pre√ßo final recomendado
 * @param input - Dados originais de entrada
 * @param competitorAnalysis - An√°lise de concorrentes
 * @returns Array com avisos (pode estar vazio se sem problemas)
 * 
 * @example
 * ```typescript
 * // Cen√°rio 1: Margem baixa + pre√ßo alto
 * const warnings1 = generateWarnings(120.00, {
 *   costPrice: 110.00,  // Margem de apenas ~8%
 *   monthlyVolume: 50
 * }, {
 *   averagePrice: 100.00,
 *   // ... outros campos
 * });
 * 
 * warnings1.forEach(w => console.log(w));
 * // Output:
 * // ‚ö†Ô∏è Margem baixa - monitore custos vari√°veis e volume m√≠nimo
 * // ‚ö†Ô∏è Pre√ßo 15% acima da m√©dia - garanta diferencia√ß√£o clara
 * 
 * // Cen√°rio 2: Volume muito baixo
 * const warnings2 = generateWarnings(100.00, {
 *   costPrice: 50.00,   // Margem boa (50%)
 *   monthlyVolume: 5    // Apenas 5 vendas/m√™s
 * }, { averagePrice: 95 });
 * 
 * warnings2.forEach(w => console.log(w));
 * // Output:
 * // ‚ö†Ô∏è Volume baixo - considere investir em marketing para aumentar demanda
 * 
 * // Cen√°rio 3: Sem problemas
 * const warnings3 = generateWarnings(100.00, {
 *   costPrice: 50.00,   // Margem boa (50%)
 *   monthlyVolume: 100  // Volume saud√°vel
 * }, { averagePrice: 105 });
 * 
 * console.log(warnings3.length); // 0 - sem avisos
 * ```
 * 
 * @remarks
 * **Avisos gerados**:
 * 
 * **1. Margem baixa** (< 15%):
 * - Condi√ß√£o: `((price - costPrice) / price) * 100 < 15`
 * - Aviso: "‚ö†Ô∏è Margem baixa - monitore custos vari√°veis e volume m√≠nimo"
 * - Risco:
 *   * Vulner√°vel a varia√ß√µes de custo
 *   * Pouca margem para promo√ß√µes
 *   * Precisa volume alto para viabilidade
 * - A√ß√£o recomendada:
 *   * Revisar estrutura de custos
 *   * Negociar com fornecedores
 *   * Garantir volume m√≠nimo de vendas
 * 
 * **2. Pre√ßo muito alto** (> 15% acima da m√©dia):
 * - Condi√ß√£o: `price > averageCompetitor * 1.15`
 * - Aviso: "‚ö†Ô∏è Pre√ßo 15% acima da m√©dia - garanta diferencia√ß√£o clara"
 * - Risco:
 *   * Perda de vendas para concorrentes
 *   * Cliente pode n√£o perceber valor
 *   * Exige forte proposta de valor
 * - A√ß√£o recomendada:
 *   * Destacar diferenciais √∫nicos
 *   * Investir em branding
 *   * Considerar servi√ßos agregados
 * 
 * **3. Volume muito baixo** (< 10 unidades/m√™s):
 * - Condi√ß√£o: `monthlyVolume < 10`
 * - Aviso: "‚ö†Ô∏è Volume baixo - considere investir em marketing para aumentar demanda"
 * - Risco:
 *   * Receita insuficiente
 *   * Alto custo por venda
 *   * Dif√≠cil sustentar opera√ß√£o
 * - A√ß√£o recomendada:
 *   * Investir em marketing
 *   * Melhorar SEO/visibilidade
 *   * Considerar marketplaces
 * 
 * **Retorno vazio**:
 * Se nenhuma condi√ß√£o for atendida, retorna array vazio `[]`
 * 
 * **Prioriza√ß√£o**:
 * Avisos s√£o independentes - pode retornar 0, 1, 2 ou 3 avisos
 * dependendo das condi√ß√µes atendidas
 */
function generateWarnings(
  price: number,
  input: SmartPricingInput,
  competitorAnalysis: CompetitorAnalysisResult
): string[] {
  const warnings: string[] = [];
  
  const margin = calculateMargin(price, input.costPrice);
  
  if (margin < 15) {
    warnings.push('‚ö†Ô∏è Margem baixa - monitore custos vari√°veis e volume m√≠nimo');
  }
  
  if (competitorAnalysis.competitors.length > 0) {
    const avgCompetitor = competitorAnalysis.averagePrice;
    if (price > avgCompetitor * 1.15) {
      warnings.push('‚ö†Ô∏è Pre√ßo 15% acima da m√©dia - garanta diferencia√ß√£o clara');
    }
  }
  
  if (input.monthlyVolume && input.monthlyVolume < 10) {
    warnings.push('‚ö†Ô∏è Volume baixo - considere investir em marketing para aumentar demanda');
  }

  return warnings;
}

/**
 * Gera sugest√µes de otimiza√ß√£o para melhorar a estrat√©gia de precifica√ß√£o
 * 
 * Fornece a√ß√µes pr√°ticas para maximizar receita, reduzir custos e melhorar
 * competitividade, adaptadas ao contexto do neg√≥cio.
 * 
 * @param input - Dados originais de entrada
 * @param competitorAnalysis - An√°lise de concorrentes
 * @returns Array com 5-7 sugest√µes de otimiza√ß√£o
 * 
 * @example
 * ```typescript
 * // Cen√°rio B2B com concorrentes
 * const optimizations = generateOptimizations({
 *   targetAudience: 'b2b',
 *   // ... outros campos
 * }, {
 *   competitors: [/* ... 5 concorrentes ... *\/],
 *   // ...
 * });
 * 
 * console.log('üöÄ Sugest√µes de otimiza√ß√£o:');
 * optimizations.forEach((opt, i) => {
 *   console.log(`${i + 1}. ${opt}`);
 * });
 * 
 * // Output t√≠pico:
 * // 1. üîÑ Monitore pre√ßos dos concorrentes semanalmente
 * // 2. üìä Teste diferentes pre√ßos com A/B testing
 * // 3. üí∞ Negocie melhores condi√ß√µes com fornecedores
 * // 4. üéØ Identifique diferenciais √∫nicos para justificar pre√ßo premium
 * // 5. üìù Considere pacotes ou contratos para aumentar ticket m√©dio
 * // 6. üìà Implemente precifica√ß√£o din√¢mica para sazonalidade
 * ```
 * 
 * @remarks
 * **Sugest√µes padr√£o** (sempre inclu√≠das - 6 itens):
 * 
 * 1. **"üîÑ Monitore pre√ßos dos concorrentes semanalmente"**
 *    - Import√¢ncia: Manter competitividade
 *    - A√ß√£o: Configurar alerts de mudan√ßa de pre√ßo
 *    - Ferramenta: Web scraping, price tracking tools
 * 
 * 2. **"üìä Teste diferentes pre√ßos com A/B testing"**
 *    - Import√¢ncia: Descobrir pre√ßo √≥timo empiricamente
 *    - A√ß√£o: Dividir tr√°fego entre 2-3 pre√ßos
 *    - M√©trica: Convers√£o √ó Revenue por varia√ß√£o
 * 
 * 3. **"üí∞ Negocie melhores condi√ß√µes com fornecedores"**
 *    - Import√¢ncia: Reduzir custo, aumentar margem
 *    - A√ß√£o: Negociar volume, prazo, desconto
 *    - Impacto: 5-15% redu√ß√£o de custo t√≠pica
 * 
 * 4. **"üéØ Identifique diferenciais √∫nicos..."** (se houver concorrentes)
 *    - Condi√ß√£o: `competitors.length > 0`
 *    - Import√¢ncia: Justificar pre√ßo premium
 *    - A√ß√£o: Destacar qualidade, servi√ßo, garantia
 *    - Exemplos: Entrega r√°pida, suporte 24/7, exclusividade
 * 
 * 5. **"üìù Considere pacotes ou contratos..."** (se B2B)
 *    - Condi√ß√£o: `targetAudience === 'b2b'`
 *    - Import√¢ncia: Aumentar ticket m√©dio e reten√ß√£o
 *    - A√ß√£o: Criar bundles, contratos anuais, volume discount
 *    - Benef√≠cio: LTV maior, receita previs√≠vel
 * 
 * 6. **"üìà Implemente precifica√ß√£o din√¢mica para sazonalidade"**
 *    - Import√¢ncia: Maximizar receita em alta demanda
 *    - A√ß√£o: Regras de pre√ßo por per√≠odo/evento
 *    - Exemplos: Black Friday, Natal, f√©rias
 * 
 * **Otimiza√ß√µes condicionais**:
 * - **Com concorrentes**: Adiciona sugest√£o de diferencia√ß√£o
 * - **B2B**: Adiciona sugest√£o de pacotes/contratos
 * 
 * **Total de sugest√µes**:
 * - M√≠nimo: 5 (sem concorrentes, B2C)
 * - M√°ximo: 7 (com concorrentes, B2B)
 * 
 * **Ordem de prioridade**:
 * As sugest√µes s√£o ordenadas por impacto esperado:
 * 1. Monitoramento (base)
 * 2. Testes (descoberta)
 * 3. Negocia√ß√£o (custo)
 * 4. Diferencia√ß√£o (valor)
 * 5. Pacotes (B2B)
 * 6. Dinamicidade (avan√ßado)
 * 
 * **Implementa√ß√£o t√≠pica**:
 * ```typescript
 * // Exibir como checklist acion√°vel
 * optimizations.forEach(opt => {
 *   console.log(`[ ] ${opt}`);
 * });
 * ```
 */
function generateOptimizations(
  input: SmartPricingInput,
  competitorAnalysis: CompetitorAnalysisResult
): string[] {
  const optimizations: string[] = [];
  
  optimizations.push('üîÑ Monitore pre√ßos dos concorrentes semanalmente');
  optimizations.push('üìä Teste diferentes pre√ßos com A/B testing');
  optimizations.push('üí∞ Negocie melhores condi√ß√µes com fornecedores');
  
  if (competitorAnalysis.competitors.length > 0) {
    optimizations.push('üéØ Identifique diferenciais √∫nicos para justificar pre√ßo premium');
  }
  
  if (input.targetAudience === 'b2b') {
    optimizations.push('üìù Considere pacotes ou contratos para aumentar ticket m√©dio');
  }
  
  optimizations.push('üìà Implemente precifica√ß√£o din√¢mica para sazonalidade');

  return optimizations;
}
