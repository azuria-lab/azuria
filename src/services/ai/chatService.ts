import { 
  AIConfig, 
  AIContext, 
  AIResponse,
  ChatMessage,
  ChatSession
} from '@/shared/types/ai';
import { AI_CONFIG } from '@/config/ai';
import { logger } from './logger';
import { pricingService } from './pricingService';
import { taxService } from './taxService';
import { competitorService } from './competitorService';
import { advancedTaxService } from './advancedTaxService';
import { alertsAndForecastingService } from './alertsAndForecastingService';
import { generateSecureMessageId, generateSecureSessionId } from '../../utils/secureRandom';

class ChatService {
  private sessions: Map<string, ChatSession> = new Map();
  private config: AIConfig = AI_CONFIG;

  /**
   * Cria uma nova sess√£o de chat
   */
  async createSession(userId: string, context: AIContext): Promise<ChatSession> {
    const sessionId = this.generateSessionId();
    const session: ChatSession = {
      id: sessionId,
      userId,
      messages: [],
      context,
      startedAt: new Date(),
      status: 'active',
      updatedAt: new Date(),
      isActive: true
    };

    this.sessions.set(sessionId, session);
    logger.info('Nova sess√£o de chat criada', { sessionId, userId });
    
    return session;
  }

  /**
   * Processa uma mensagem do usu√°rio e gera resposta da IA
   */
  async processMessage(
    sessionId: string, 
    userMessage: string
  ): Promise<AIResponse> {
    const session = this.sessions.get(sessionId);
    if (!session) {
      throw new Error('Sess√£o n√£o encontrada');
    }

    try {
      // Adiciona mensagem do usu√°rio
      const userMessage_: ChatMessage = {
        id: this.generateMessageId(),
        type: 'user',
        role: 'user',
        content: userMessage,
        timestamp: new Date()
      };

      session.messages.push(userMessage_);

      // Detecta inten√ß√£o e rota para servi√ßo apropriado
      const intent = await this.detectIntent(userMessage);
      const response = await this.generateResponse(userMessage, intent, session.context);

      // Adiciona resposta da IA
      const aiMessage: ChatMessage = {
        id: this.generateMessageId(),
        type: 'ai',
        role: 'assistant',
        content: response.message,
        timestamp: new Date(),
        metadata: {
          action: intent,
          data: response.data
        }
      };

      session.messages.push(aiMessage);
      if (session.updatedAt !== undefined) {
        session.updatedAt = new Date();
      }

      logger.info('Mensagem processada', { 
        sessionId, 
        intent, 
        userMessage: userMessage.substring(0, 100) + '...' 
      });

      return response;

    } catch (error) {
      logger.error('Erro ao processar mensagem', { sessionId, error });
      return {
        message: 'Desculpe, ocorreu um erro ao processar sua mensagem. Pode tentar novamente? üòÖ',
        suggestions: [
          'Reformular a pergunta',
          'Tentar novamente',
          'Falar com suporte'
        ]
      };
    }
  }

  /**
   * Detecta a inten√ß√£o da mensagem do usu√°rio
   */
  private async detectIntent(message: string): Promise<string> {
    const lowerMessage = message.toLowerCase();
    
    // Palavras-chave para precifica√ß√£o
    if (this.containsKeywords(lowerMessage, [
      'pre√ßo', 'precificar', 'quanto cobrar', 'margem', 'lucro',
      'custo', 'vender por', 'valor', 'calcular pre√ßo'
    ])) {
      return 'pricing';
    }

    // Palavras-chave para impostos
    if (this.containsKeywords(lowerMessage, [
      'imposto', 'tributa√ß√£o', 'simples nacional', 'lucro presumido',
      'lucro real', 'regime tribut√°rio', 'al√≠quota', 'icms', 'pis', 'cofins'
    ])) {
      return 'tax';
    }

    // Palavras-chave para concorr√™ncia
    if (this.containsKeywords(lowerMessage, [
      'concorrente', 'mercado livre', 'shopee', 'amazon', 
      'concorr√™ncia', 'competi√ß√£o', 'outros vendedores'
    ])) {
      return 'competitor';
    }

    // Palavras-chave para alertas
    if (this.containsKeywords(lowerMessage, [
      'alerta', 'aviso', 'notifica√ß√£o', 'preju√≠zo', 'perda'
    ])) {
      return 'alert';
    }

    return 'general';
  }

  /**
   * Gera resposta baseada na inten√ß√£o detectada
   */
  private async generateResponse(
    message: string, 
    intent: string, 
    context: AIContext
  ): Promise<AIResponse> {
    switch (intent) {
      case 'pricing':
        return await this.handlePricingQuery(message, context);
      
      case 'tax':
        return await this.handleTaxQuery(message, context);
      
      case 'competitor':
        return await this.handleCompetitorQuery(message, context);
      
      case 'alert':
        return await this.handleAlertQuery(message, context);
      
      default:
        return await this.handleGeneralQuery(message, context);
    }
  }

  /**
   * Trata consultas sobre precifica√ß√£o
   */
  private async handlePricingQuery(message: string, context: AIContext): Promise<AIResponse> {
    try {
      // Extrai dados da mensagem ou usa contexto
      const analysisData = this.extractPricingData(message, context);
      
      if (!analysisData.costPrice) {
        return {
          message: `Para te ajudar com a precifica√ß√£o, preciso de algumas informa√ß√µes! üí∞

üìã **Me conta:**
- Qual o pre√ßo de custo do produto?
- Que margem de lucro voc√™ quer?
- Em qual regime tribut√°rio sua empresa est√°?

Exemplo: *"Tenho um produto que custa R$ 50, quero 40% de margem e estou no Simples Nacional"*`,
          suggestions: [
            'Informar pre√ßo de custo',
            'Definir margem desejada',
            'Confirmar regime tribut√°rio'
          ]
        };
      }

      const analysis = await pricingService.analyzePricing(analysisData);
      
      return {
        message: `üí° **An√°lise de Precifica√ß√£o**

üéØ **Pre√ßo sugerido:** R$ ${analysis.suggestedPrice.toFixed(2)}

üìä **Detalhamento:**
- Pre√ßo de custo: R$ ${analysis.costPrice.toFixed(2)}
- Impostos: R$ ${analysis.taxes.toFixed(2)}
- Margem l√≠quida: ${((analysis.suggestedPrice - analysis.costPrice - analysis.taxes) / analysis.suggestedPrice * 100).toFixed(1)}%

üí≠ **Por que esse pre√ßo?**
${analysis.explanation}

${analysis.competitorAnalysis?.length ? 
  'üîç **Compara√ß√£o com concorrentes:**\n' + 
  analysis.competitorAnalysis.map(comp => 
    `- ${comp.platform}: R$ ${comp.price.toFixed(2)} (${comp.seller})`
  ).join('\n') : ''}`,
        data: analysis,
        actions: [
          {
            type: 'pricing',
            label: 'Ver an√°lise detalhada',
            data: analysis
          }
        ]
      };

    } catch (error) {
      logger.error('Erro na an√°lise de precifica√ß√£o', { error });
      return {
        message: 'Ops! Tive um problema ao analisar a precifica√ß√£o. Pode me dar mais detalhes sobre o produto? ü§î'
      };
    }
  }

  /**
   * Trata consultas sobre impostos
   */
  private async handleTaxQuery(message: string, context: AIContext): Promise<AIResponse> {
    try {
      const taxAnalysis = await taxService.analyzeTaxOptimization({
        currentRegime: context.taxRegime || 'simples_nacional',
        monthlyRevenue: this.extractRevenue(message),
        businessType: context.businessType || 'comercio'
      });

      const alternativeRegimesText = taxAnalysis.alternativeRegimes.length > 0 ? 
        'üîç **Regimes alternativos:**\n' +
        taxAnalysis.alternativeRegimes.map(regime => 
          `- ${regime.description}: ${regime.rate}%`
        ).join('\n') + '\n' : '';

      const economyText = taxAnalysis.potentialSavings > 0 ? 
        `üí∏ **Economia potencial:** R$ ${taxAnalysis.potentialSavings.toFixed(2)}/m√™s` : '';

      return {
        message: `üìã **An√°lise Tribut√°ria**

üèõÔ∏è **Seu regime atual:** ${taxAnalysis.currentRegime.description}
üí∞ **Al√≠quota efetiva:** ${taxAnalysis.currentRegime.rate}%

${alternativeRegimesText}

üí° **Recomenda√ß√µes:**
${taxAnalysis.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

${economyText}`,
        data: taxAnalysis,
        actions: [
          {
            type: 'tax',
            label: 'Simular mudan√ßa de regime',
            data: taxAnalysis
          }
        ]
      };

    } catch (error) {
      logger.error('Erro na an√°lise tribut√°ria', { error });
      return {
        message: 'Preciso de mais informa√ß√µes para analisar sua situa√ß√£o tribut√°ria. Qual seu faturamento mensal aproximado? üìä'
      };
    }
  }

  /**
   * Trata consultas sobre concorr√™ncia
   */
  private async handleCompetitorQuery(message: string, context: AIContext): Promise<AIResponse> {
    try {
      const productName = this.extractProductName(message);
      const competitorData = await competitorService.analyzeCompetitors(productName);

      return {
        message: `üîç **An√°lise da Concorr√™ncia**

üì¶ **Produto:** ${productName}

üí∞ **Pre√ßos encontrados:**
${competitorData.map(comp => 
  `‚Ä¢ ${comp.platform}: R$ ${comp.price.toFixed(2)} - ${comp.seller}`
).join('\n')}

üìä **Pre√ßo m√©dio:** R$ ${(competitorData.reduce((sum, comp) => sum + comp.price, 0) / competitorData.length).toFixed(2)}

üí° **Recomenda√ß√£o:**
Para ser competitivo, sugiro um pre√ßo entre R$ ${Math.min(...competitorData.map(c => c.price)).toFixed(2)} e R$ ${Math.max(...competitorData.map(c => c.price)).toFixed(2)}.`,
        data: competitorData,
        actions: [
          {
            type: 'competitor',
            label: 'Monitorar pre√ßos',
            data: { productName, competitors: competitorData }
          }
        ]
      };

    } catch (error) {
      logger.error('Erro na an√°lise de concorr√™ncia', { error });
      return {
        message: 'Para analisar a concorr√™ncia, preciso saber qual produto voc√™ est√° vendendo. Pode me contar mais detalhes? üîç'
      };
    }
  }

  /**
   * An√°lise tribut√°ria avan√ßada
   */
  private async handleAdvancedTaxQuery(message: string, context: AIContext): Promise<AIResponse> {
    try {
      // Verifica se a mensagem solicita an√°lise completa
      const needsFullAnalysis = message.toLowerCase().includes('an√°lise completa') || 
                              message.toLowerCase().includes('otimiza√ß√£o') ||
                              message.toLowerCase().includes('planejamento');

      if (needsFullAnalysis && context.businessProfile) {
        const analysis = await advancedTaxService.performComprehensiveTaxAnalysis(context.businessProfile);
        
        return {
          message: `üìä **An√°lise Tribut√°ria Completa**

üéØ **Regime Atual:** ${analysis.currentAnalysis.currentRegime}
üí∞ **Carga Tribut√°ria:** ${analysis.currentAnalysis.effectiveRate.toFixed(2)}%

${analysis.optimizationPlan ? 
  `üöÄ **Oportunidade Identificada!**
  
  **Regime Recomendado:** ${analysis.optimizationPlan.recommendedRegime}
  **Economia Anual:** R$ ${analysis.optimizationPlan.potentialSavingsAnnual.toLocaleString('pt-BR')}
  **Timeline:** ${analysis.optimizationPlan.timeline}
  
  **Pr√≥ximos Passos:**
  ${analysis.optimizationPlan.implementationSteps.slice(0, 3).map(step => 
    `${step.step}. ${step.description} (${step.deadline})`
  ).join('\n  ')}` : 
  '‚úÖ **Regime Atual Otimizado**\n\nSeu regime tribut√°rio atual j√° √© o mais adequado para seu perfil.'
}

üìà **Proje√ß√µes (12 meses):**
- Cen√°rio conservador: R$ ${analysis.forecast.scenarios.conservative.taxes.toLocaleString('pt-BR')} em impostos
- Cen√°rio realista: R$ ${analysis.forecast.scenarios.realistic.taxes.toLocaleString('pt-BR')} em impostos

üí° **Recomenda√ß√µes Estrat√©gicas:**
${analysis.strategicRecommendations.slice(0, 3).join('\n')}`,
          data: analysis,
          actions: [
            {
              type: 'tax_plan',
              label: 'Ver plano detalhado',
              data: analysis.optimizationPlan
            },
            {
              type: 'tax_scenarios',
              label: 'Comparar regimes',
              data: analysis.scenarios
            }
          ]
        };
      }

      // An√°lise b√°sica usando o servi√ßo original
      const basicAnalysis = await taxService.analyzeTaxOptimization({
        currentRegime: context.taxRegime || 'simples_nacional',
        monthlyRevenue: this.extractRevenue(message),
        businessType: context.businessType || 'comercio'
      });

      return {
        message: `üí∞ **An√°lise Tribut√°ria**

üìä **Regime Atual:** ${basicAnalysis.currentRegime}
üí∏ **Carga Tribut√°ria:** ${basicAnalysis.effectiveRate.toFixed(2)}%
üí∞ **Impostos Mensais:** R$ ${basicAnalysis.monthlyTax.toFixed(2)}

${basicAnalysis.alternativeRegimes.length > 0 ? 
  'üîç **Regimes Alternativos:**\n' +
  basicAnalysis.alternativeRegimes.map(regime => 
    `‚Ä¢ ${regime.type}: ${regime.rate.toFixed(2)}% (R$ ${((this.extractRevenue(message) * regime.rate) / 100).toFixed(2)}/m√™s)`
  ).join('\n') : ''}

${basicAnalysis.recommendations.length > 0 ? 
  '\nüí° **Recomenda√ß√µes:**\n' + 
  basicAnalysis.recommendations.join('\n') : ''}

Quer uma **an√°lise completa** com planejamento personalizado?`,
        data: basicAnalysis,
        suggestions: [
          'An√°lise completa de tributa√ß√£o',
          'Comparar todos os regimes',
          'Planejamento tribut√°rio personalizado'
        ]
      };

    } catch (error) {
      logger.error('Erro na an√°lise tribut√°ria avan√ßada', { error });
      return {
        message: 'Para fazer a an√°lise tribut√°ria, preciso saber seu faturamento mensal e tipo de empresa. Pode me passar essas informa√ß√µes? üìä'
      };
    }
  }

  /**
   * Trata consultas sobre alertas
   */
  private async handleAlertQuery(message: string, context: AIContext): Promise<AIResponse> {
    try {
      // Verifica se usu√°rio quer an√°lise completa de alertas
      const wantsFullAnalysis = message.toLowerCase().includes('completa') || 
                               message.toLowerCase().includes('detalhada') ||
                               message.toLowerCase().includes('previs√£o');

      if (wantsFullAnalysis && context.businessProfile) {
        const monitoring = await alertsAndForecastingService.runMonitoringCycle(context.businessProfile);
        
        return {
          message: `ÔøΩ **Monitoramento Completo do Neg√≥cio**

üè• **Sa√∫de do Neg√≥cio:** ${monitoring.healthScore}/100
${this.getHealthStatusEmoji(monitoring.healthScore)}

‚ö†Ô∏è **Alertas Ativos:** ${monitoring.alerts.length}
${monitoring.alerts.length > 0 ? 
  monitoring.alerts.slice(0, 3).map(alert => 
    `‚Ä¢ ${this.getAlertSeverityEmoji(alert.severity)} ${alert.title}`
  ).join('\n') : '‚úÖ Nenhum alerta cr√≠tico'}

üìà **Previs√µes (3 meses):**
‚Ä¢ Receita: R$ ${monitoring.forecast.forecasts.revenue.prediction.toLocaleString('pt-BR')} (tend√™ncia ${this.getTrendEmoji(monitoring.forecast.forecasts.revenue.trend)})
‚Ä¢ Margem: ${monitoring.forecast.forecasts.margin.prediction.toFixed(1)}%
‚Ä¢ Market Share: ${monitoring.forecast.forecasts.marketShare.prediction.toFixed(1)}%

üéØ **A√ß√µes Imediatas:**
${monitoring.immediateActions.slice(0, 3).join('\n')}`,
          data: monitoring,
          actions: [
            {
              type: 'alert',
              label: 'Ver todos os alertas',
              data: monitoring.alerts
            },
            {
              type: 'prediction',
              label: 'An√°lise preditiva detalhada',
              data: monitoring.forecast
            }
          ]
        };
      }

      // An√°lise b√°sica de alertas
      const activeAlerts = alertsAndForecastingService.getActiveAlerts();
      
      return {
        message: `ÔøΩüîî **Sistema de Alertas Ativo**

üìä **Status Atual:**
‚Ä¢ Alertas ativos: ${activeAlerts.length}
‚Ä¢ Monitoramento: ‚úÖ Ativo 24/7

üîç **Estou monitorando:**
‚Ä¢ ‚ö†Ô∏è Margens negativas
‚Ä¢ üìä Mudan√ßas de pre√ßos dos concorrentes  
‚Ä¢ üí∞ Oportunidades de otimiza√ß√£o tribut√°ria
‚Ä¢ üéØ Impacto de promo√ß√µes
‚Ä¢ üìà Tend√™ncias de mercado
‚Ä¢ üè• Sa√∫de geral do neg√≥cio

${activeAlerts.length > 0 ? 
  '\nüö® **Alertas Recentes:**\n' + 
  activeAlerts.slice(0, 3).map(alert => 
    `‚Ä¢ ${alert.title} (${alert.severity})`
  ).join('\n') : ''}

Quer uma **an√°lise completa** com previs√µes?`,
        suggestions: [
          'An√°lise completa de alertas',
          'Configurar alertas personalizados',
          'Ver previs√µes de neg√≥cio',
          'Analisar impacto de promo√ß√£o'
        ]
      };

    } catch (error) {
      logger.error('Erro na an√°lise de alertas', { error });
      return {
        message: `üîî **Sistema de Alertas**

Estou sempre monitorando seu neg√≥cio e te aviso quando algo importante acontece!

Para ativar monitoramento personalizado, me conte mais sobre seu neg√≥cio. üìä`
      };
    }
  }

  /**
   * Trata consultas gerais
   */
  private async handleGeneralQuery(message: string, context: AIContext): Promise<AIResponse> {
    return {
      message: `Oi! üëã Sou a Azuria AI, sua assistente especializada em:

üí∞ **Precifica√ß√£o Inteligente**
‚Ä¢ C√°lculo autom√°tico de pre√ßos
‚Ä¢ An√°lise de margens e custos
‚Ä¢ Sugest√µes de otimiza√ß√£o

üìã **An√°lise Tribut√°ria**
‚Ä¢ Compara√ß√£o de regimes fiscais
‚Ä¢ C√°lculo de impostos
‚Ä¢ Estrat√©gias de economia

üîç **Monitoramento de Concorr√™ncia**
‚Ä¢ Compara√ß√£o de pre√ßos em marketplaces
‚Ä¢ Alertas de mudan√ßas no mercado
‚Ä¢ Posicionamento competitivo

Como posso te ajudar hoje? üòä`,
      suggestions: [
        'Calcular pre√ßo de um produto',
        'Analisar impostos',
        'Comparar com concorrentes',
        'Ver alertas importantes'
      ]
    };
  }

  // M√©todos auxiliares
  private containsKeywords(text: string, keywords: string[]): boolean {
    return keywords.some(keyword => text.includes(keyword));
  }

  private extractPricingData(message: string, context: AIContext) {
    // Regex para extrair n√∫meros (pre√ßos)
    const numbers = message.match(/\d+[.,]?\d*/g)?.map(n => parseFloat(n.replace(',', '.'))) || [];
    
    return {
      costPrice: numbers[0] || 0,
      desiredMargin: numbers[1] || (context.averageMargin || 30),
      taxRegime: context.taxRegime || 'simples_nacional',
      businessType: context.businessType || 'comercio'
    };
  }

  private extractRevenue(message: string): number {
    const numbers = message.match(/\d+[.,]?\d*/g)?.map(n => parseFloat(n.replace(',', '.'))) || [];
    return Math.max(...numbers) || 10000; // Default 10k
  }

  private extractProductName(message: string): string {
    // L√≥gica simples para extrair nome do produto
    const words = message.split(' ');
    const commonWords = ['pre√ßo', 'produto', 'vender', 'concorrente', 'mercado'];
    const productWords = words.filter(word => 
      word.length > 3 && !commonWords.includes(word.toLowerCase())
    );
    
    return productWords.slice(0, 3).join(' ') || 'produto';
  }

  private generateSessionId(): string {
    return generateSecureSessionId();
  }

  private generateMessageId(): string {
    return generateSecureMessageId();
  }

  /**
   * Obt√©m sess√£o por ID
   */
  getSession(sessionId: string): ChatSession | undefined {
    return this.sessions.get(sessionId);
  }

  /**
   * Lista sess√µes ativas de um usu√°rio
   */
  getUserSessions(userId: string): ChatSession[] {
    return Array.from(this.sessions.values())
      .filter(session => session.userId === userId && (session.isActive ?? session.status === 'active'));
  }

  /**
   * Encerra uma sess√£o
   */
  closeSession(sessionId: string): void {
    const session = this.sessions.get(sessionId);
    if (session) {
      session.status = 'closed';
      if (session.isActive !== undefined) {
        session.isActive = false;
      }
      if (session.updatedAt !== undefined) {
        session.updatedAt = new Date();
      }
      logger.info('Sess√£o encerrada', { sessionId });
    }
  }

  /**
   * M√©todos auxiliares para formata√ß√£o
   */
  private getHealthStatusEmoji(healthScore: number): string {
    if (healthScore >= 80) {return 'üíö Excelente';}
    if (healthScore >= 60) {return 'üíõ Aten√ß√£o necess√°ria';}
    return 'üî¥ Situa√ß√£o cr√≠tica';
  }

  private getAlertSeverityEmoji(severity: string): string {
    if (severity === 'critical') {return 'üö®';}
    if (severity === 'high') {return '‚ö†Ô∏è';}
    return '‚ÑπÔ∏è';
  }

  private getTrendEmoji(trend: string): string {
    if (trend === 'up') {return 'üìà';}
    if (trend === 'down') {return 'üìâ';}
    return '‚û°Ô∏è';
  }
}

export const chatService = new ChatService();