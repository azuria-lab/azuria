/**
 * Detection Module
 * Handles price change detection, alerts generation, and alert processing
 */

import { AIAlert, CompetitorPricing } from '@/shared/types/ai';
import { generateSecureId } from '@/utils/secureRandom';
import { competitorService } from '../competitorService';
import { logger } from '../logger';
import { MonitoringRule, PriceHistory } from './types';

/**
 * Verifica uma regra de monitoramento espec√≠fica
 * 
 * Busca pre√ßos atuais dos concorrentes, armazena no hist√≥rico
 * e detecta mudan√ßas significativas de pre√ßos.
 * 
 * @param rule - Regra de monitoramento a executar
 * @param priceHistory - Mapa de hist√≥rico de pre√ßos (mut√°vel)
 * @returns Promise que resolve quando verifica√ß√£o completa
 * 
 * @example
 * ```typescript
 * const rules = new Map<string, MonitoringRule>();
 * const history = new Map<string, PriceHistory[]>();
 * 
 * // Criar regra de monitoramento
 * const rule: MonitoringRule = {
 *   id: 'rule_123',
 *   productName: 'iPhone 15 Pro 256GB',
 *   platforms: [CompetitorPlatform.MERCADO_LIVRE, CompetitorPlatform.AMAZON],
 *   frequency: 'daily',
 *   priceThreshold: 5,  // Alerta com mudan√ßa de ¬±5%
 *   isActive: true,
 *   createdAt: new Date()
 * };
 * 
 * // Caso 1: Primeira verifica√ß√£o (sem hist√≥rico)
 * console.log('üîç Verificando pre√ßos pela primeira vez...');
 * await checkRule(rule, history);
 * 
 * console.log('Hist√≥rico criado:');
 * const key = `${rule.productName}_${rule.platforms.join('_')}`;
 * const stored = history.get(key);
 * console.log(`${stored?.length || 0} vendedores registrados`);
 * // Output:
 * // üîç Verificando pre√ßos pela primeira vez...
 * // Hist√≥rico criado:
 * // 3 vendedores registrados
 * 
 * stored?.forEach(h => {
 *   console.log(`  ${h.platform} - ${h.seller}: R$ ${h.prices[0].price}`);
 * });
 * // Output:
 * //   mercado_livre - Magazine Luiza: R$ 5499.00
 * //   mercado_livre - Fast Shop: R$ 5399.00
 * //   amazon - Amazon: R$ 5599.00
 * 
 * // Caso 2: Segunda verifica√ß√£o (com mudan√ßa de pre√ßo)
 * // Simular mudan√ßa de pre√ßo depois de 1 dia
 * await new Promise(resolve => setTimeout(resolve, 100));
 * 
 * console.log('\nüîç Verificando pre√ßos novamente...');
 * await checkRule(rule, history);
 * 
 * // Se algum pre√ßo mudou > 5%, alerta ser√° gerado
 * // Exemplo: Magazine Luiza baixou de R$ 5499 para R$ 5199 (-5.4%)
 * // Output nos logs:
 * // üö® ALERTA: Mudan√ßa de pre√ßo detectada - Magazine Luiza reduziu o pre√ßo em 5.4%
 * 
 * // Caso 3: Verificar hist√≥rico acumulado
 * const magazineLuiza = stored?.find(
 *   h => h.platform === 'mercado_livre' && h.seller === 'Magazine Luiza'
 * );
 * 
 * console.log('\nüìä Hist√≥rico Magazine Luiza:');
 * magazineLuiza?.prices.forEach((p, i) => {
 *   console.log(`  ${i + 1}. R$ ${p.price} - ${p.timestamp.toISOString()}`);
 * });
 * // Output:
 * // üìä Hist√≥rico Magazine Luiza:
 * //   1. R$ 5499.00 - 2024-10-19T10:00:00.000Z
 * //   2. R$ 5199.00 - 2024-10-19T11:00:00.000Z
 * 
 * // Caso 4: Limite de hist√≥rico (m√°ximo 100 entradas)
 * // Simular 150 verifica√ß√µes
 * for (let i = 0; i < 150; i++) {
 *   await checkRule(rule, history);
 * }
 * 
 * const finalHistory = history.get(key);
 * finalHistory?.forEach(h => {
 *   console.log(`${h.seller}: ${h.prices.length} entradas no hist√≥rico`);
 * });
 * // Output (cada vendedor mant√©m no m√°ximo 100 entradas):
 * // Magazine Luiza: 100 entradas no hist√≥rico
 * // Fast Shop: 100 entradas no hist√≥rico
 * // Amazon: 100 entradas no hist√≥rico
 * ```
 * 
 * @remarks
 * **Pipeline de execu√ß√£o**:
 * 
 * 1. **Buscar pre√ßos atuais**:
 *    ```typescript
 *    const currentPrices = await competitorService.analyzeCompetitors(
 *      rule.productName
 *    );
 *    ```
 *    - Busca em todas as plataformas configuradas
 *    - Web scraping + APIs
 * 
 * 2. **Preparar chave de hist√≥rico**:
 *    ```typescript
 *    const historicalKey = `${productName}_${platforms.join('_')}`;
 *    // Ex: 'iPhone 15_mercado_livre_amazon'
 *    ```
 * 
 * 3. **Atualizar hist√≥rico por vendedor**:
 *    - Encontra ou cria entrada para cada (platform, seller)
 *    - Adiciona novo pre√ßo com timestamp
 *    - Limita a 100 entradas mais recentes (FIFO)
 * 
 * 4. **Detectar mudan√ßas**:
 *    ```typescript
 *    await detectPriceChanges(rule, currentPrices, history);
 *    ```
 *    - Compara pre√ßo atual vs anterior
 *    - Gera alertas se mudan√ßa >= threshold
 * 
 * **Estrutura do hist√≥rico**:
 * ```typescript
 * Map {
 *   'iPhone 15_mercado_livre_amazon' => [
 *     {
 *       productName: 'iPhone 15',
 *       platform: 'mercado_livre',
 *       seller: 'Magazine Luiza',
 *       prices: [
 *         { price: 5499.00, timestamp: Date, source: 'automated_monitoring' },
 *         { price: 5199.00, timestamp: Date, source: 'automated_monitoring' }
 *       ]
 *     }
 *   ]
 * }
 * ```
 * 
 * **Limite de hist√≥rico**:
 * - M√°ximo 100 entradas por vendedor
 * - Mant√©m apenas as mais recentes
 * - Implementa√ß√£o: `prices.slice(-100)`
 * 
 * **Source tag**:
 * Todas as entradas t√™m `source: 'automated_monitoring'`
 * para distinguir de verifica√ß√µes manuais.
 * 
 * **Muta√ß√µes**:
 * - `priceHistory` Map √© modificado (adiciona/atualiza hist√≥rico)
 * - N√£o modifica a `rule` (apenas l√™)
 * 
 * **Performance**:
 * - Tempo t√≠pico: 1-3 segundos
 * - Depende de quantas plataformas e web scraping
 * - Gargalo: `competitorService.analyzeCompetitors()`
 * 
 * **Alertas gerados**:
 * - Autom√°ticos quando mudan√ßa >= threshold
 * - Processados por `detectPriceChanges()` e `processAlerts()`
 * - Logs com `logger.info()`
 * 
 * **Uso no ciclo de monitoramento**:
 * Esta fun√ß√£o √© chamada por `runMonitoringCycle()` para cada regra ativa.
 */
export async function checkRule(
  rule: MonitoringRule,
  priceHistory: Map<string, PriceHistory[]>
): Promise<void> {
  const currentPrices = await competitorService.analyzeCompetitors(rule.productName);
  const historicalKey = `${rule.productName}_${rule.platforms.join('_')}`;
  const history = priceHistory.get(historicalKey) || [];

  for (const competitor of currentPrices) {
    let productHistory = history.find(h => 
      h.platform === competitor.platform && h.seller === competitor.seller
    );

    if (!productHistory) {
      productHistory = {
        productName: rule.productName,
        platform: competitor.platform,
        seller: competitor.seller || 'Desconhecido',
        prices: []
      };
      history.push(productHistory);
    }

    productHistory.prices.push({
      price: competitor.price,
      timestamp: new Date(),
      source: 'automated_monitoring'
    });

    if (productHistory.prices.length > 100) {
      productHistory.prices = productHistory.prices.slice(-100);
    }
  }

  priceHistory.set(historicalKey, history);

  await detectPriceChanges(rule, currentPrices, history);
}

/**
 * Detecta mudan√ßas significativas de pre√ßos
 * 
 * Compara pre√ßos atuais com hist√≥rico anterior e gera alertas
 * quando a mudan√ßa ultrapassa o threshold configurado.
 * 
 * @param rule - Regra com threshold e configura√ß√µes
 * @param currentPrices - Pre√ßos atuais dos concorrentes
 * @param history - Hist√≥rico de pre√ßos para compara√ß√£o
 * @returns Promise que resolve quando detec√ß√£o completa
 * 
 * @example
 * ```typescript
 * // Exemplo interno - fun√ß√£o privada, mas vamos demonstrar l√≥gica
 * 
 * const rule: MonitoringRule = {
 *   id: 'rule_123',
 *   productName: 'iPhone 15 Pro',
 *   platforms: [CompetitorPlatform.MERCADO_LIVRE],
 *   frequency: 'daily',
 *   priceThreshold: 5,  // Alertar com mudan√ßa >= 5%
 *   isActive: true,
 *   createdAt: new Date()
 * };
 * 
 * const currentPrices: CompetitorPricing[] = [
 *   {
 *     platform: CompetitorPlatform.MERCADO_LIVRE,
 *     seller: 'Magazine Luiza',
 *     price: 5199.00,
 *     url: 'https://...'
 *   },
 *   {
 *     platform: CompetitorPlatform.MERCADO_LIVRE,
 *     seller: 'Fast Shop',
 *     price: 5650.00,
 *     url: 'https://...'
 *   }
 * ];
 * 
 * const history: PriceHistory[] = [
 *   {
 *     productName: 'iPhone 15 Pro',
 *     platform: CompetitorPlatform.MERCADO_LIVRE,
 *     seller: 'Magazine Luiza',
 *     prices: [
 *       { price: 5499.00, timestamp: new Date('2024-10-18'), source: 'automated' },
 *       { price: 5299.00, timestamp: new Date('2024-10-19'), source: 'automated' }
 *     ]
 *   },
 *   {
 *     productName: 'iPhone 15 Pro',
 *     platform: CompetitorPlatform.MERCADO_LIVRE,
 *     seller: 'Fast Shop',
 *     prices: [
 *       { price: 5599.00, timestamp: new Date('2024-10-19'), source: 'automated' }
 *     ]
 *   }
 * ];
 * 
 * // Executar detec√ß√£o
 * await detectPriceChanges(rule, currentPrices, history);
 * 
 * // An√°lise do que aconteceu:
 * 
 * // 1. Magazine Luiza:
 * //    - Pre√ßo anterior: R$ 5299.00 (√∫ltima entrada do hist√≥rico)
 * //    - Pre√ßo atual: R$ 5199.00
 * //    - Mudan√ßa: -1.9% (abaixo do threshold de 5%)
 * //    - Resultado: SEM alerta
 * 
 * // 2. Fast Shop:
 * //    - Tem apenas 1 entrada no hist√≥rico (precisa >= 2)
 * //    - Resultado: SEM alerta (hist√≥rico insuficiente)
 * 
 * // Caso com alerta:
 * const historyWithBigChange: PriceHistory[] = [
 *   {
 *     productName: 'iPhone 15 Pro',
 *     platform: CompetitorPlatform.MERCADO_LIVRE,
 *     seller: 'Magazine Luiza',
 *     prices: [
 *       { price: 5499.00, timestamp: new Date('2024-10-18'), source: 'automated' },
 *       { price: 5899.00, timestamp: new Date('2024-10-19'), source: 'automated' }
 *       // Pre√ßo subiu R$ 400 (hist√≥rico)
 *     ]
 *   }
 * ];
 * 
 * const newCurrentPrices: CompetitorPricing[] = [
 *   {
 *     platform: CompetitorPlatform.MERCADO_LIVRE,
 *     seller: 'Magazine Luiza',
 *     price: 5199.00,  // Caiu de R$ 5899 para R$ 5199
 *     url: 'https://...'
 *   }
 * ];
 * 
 * await detectPriceChanges(rule, newCurrentPrices, historyWithBigChange);
 * 
 * // An√°lise:
 * // - Pre√ßo anterior: R$ 5899.00
 * // - Pre√ßo atual: R$ 5199.00
 * // - Mudan√ßa: -11.9% (acima do threshold de 5%)
 * // - Severidade: 'medium' (|11.9%| < 15%)
 * // - Resultado: ALERTA GERADO ‚úÖ
 * 
 * // Alerta gerado:
 * // {
 * //   id: 'alert_1729368000000_xyz',
 * //   type: 'competitor_price_change',
 * //   severity: 'medium',
 * //   title: 'Mudan√ßa de pre√ßo detectada',
 * //   message: 'Magazine Luiza reduziu o pre√ßo em 11.9%',
 * //   timestamp: Date,
 * //   actionable: false,  // (11.9% < 20%)
 * //   suggestedAction: 'Aten√ß√£o: concorrente reduziu pre√ßo significativamente',
 * //   productId: 'iPhone 15 Pro'
 * // }
 * 
 * // Logs gerados:
 * // INFO: Alerta de concorr√™ncia gerado {...}
 * // INFO: üö® ALERTA: Mudan√ßa de pre√ßo detectada - Magazine Luiza reduziu...
 * ```
 * 
 * @remarks
 * **L√≥gica de detec√ß√£o**:
 * 
 * 1. **Para cada concorrente**:
 *    - Busca hist√≥rico correspondente (platform + seller)
 *    - Requer m√≠nimo 2 entradas no hist√≥rico
 *    - Compara pre√ßo atual vs pen√∫ltimo pre√ßo
 * 
 * 2. **C√°lculo da mudan√ßa**:
 *    ```typescript
 *    const previousPrice = prices[prices.length - 2].price;
 *    const currentPrice = competitor.price;
 *    const changePercent = ((currentPrice - previousPrice) / previousPrice) * 100;
 *    ```
 * 
 * 3. **Threshold**:
 *    - Se `|changePercent| >= rule.priceThreshold` ‚Üí ALERTA
 *    - Exemplo: threshold=5% ‚Üí alerta com mudan√ßas >= ¬±5%
 * 
 * 4. **Severidade do alerta**:
 *    - `|changePercent| > 15%` ‚Üí severity: 'high'
 *    - `|changePercent| <= 15%` ‚Üí severity: 'medium'
 * 
 * 5. **Actionable**:
 *    - `|changePercent| > 20%` ‚Üí actionable: true
 *    - Mudan√ßas muito grandes requerem a√ß√£o imediata
 * 
 * **Gera√ß√£o de sugest√µes**:
 * - Delegado para `generatePriceChangeSuggestions()`
 * - Primeira sugest√£o vira `suggestedAction`
 * 
 * **Processamento de alertas**:
 * - Se alertas gerados ‚Üí `processAlerts()` √© chamado
 * - Logs s√£o registrados
 * - Alertas podem ser enviados (email, webhook, etc.)
 * 
 * **Estrutura do alerta**:
 * ```typescript
 * {
 *   id: 'alert_{timestamp}_{random}',
 *   type: 'competitor_price_change',
 *   severity: 'high' | 'medium',
 *   title: 'Mudan√ßa de pre√ßo detectada',
 *   message: 'Vendedor aumentou/reduziu o pre√ßo em X%',
 *   timestamp: new Date(),
 *   actionable: boolean,  // true se |mudan√ßa| > 20%
 *   suggestedAction: string,
 *   productId: string  // nome do produto
 * }
 * ```
 * 
 * **Por que comparar com pen√∫ltimo pre√ßo?**
 * - √öltima entrada (`prices[length-1]`) √© o pre√ßo ATUAL que acabou de ser adicionado
 * - Pen√∫ltima entrada (`prices[length-2]`) √© o pre√ßo ANTERIOR (√∫ltima verifica√ß√£o)
 * - Permite detectar mudan√ßas entre verifica√ß√µes sucessivas
 * 
 * **Edge cases**:
 * - Hist√≥rico vazio ‚Üí nenhum alerta
 * - Apenas 1 entrada ‚Üí nenhum alerta (precisa comparar)
 * - Mudan√ßa = 0% ‚Üí nenhum alerta
 * - Vendedor desapareceu ‚Üí nenhum alerta para esse vendedor
 * 
 * **Performance**:
 * - Loop sequencial por concorrente
 * - Opera√ß√µes O(1) por concorrente
 * - Total: O(n) onde n = n√∫mero de concorrentes
 */
async function detectPriceChanges(
  rule: MonitoringRule,
  currentPrices: CompetitorPricing[],
  history: PriceHistory[]
): Promise<void> {
  const alerts: AIAlert[] = [];

  for (const competitor of currentPrices) {
    const productHistory = history.find(h => 
      h.platform === competitor.platform && h.seller === competitor.seller
    );

    if (!productHistory || productHistory.prices.length < 2) {
      continue;
    }

    const prices = productHistory.prices;
    const previousPrice = prices[prices.length - 2].price;
    const currentPrice = competitor.price;
    const changePercent = ((currentPrice - previousPrice) / previousPrice) * 100;

    if (Math.abs(changePercent) >= rule.priceThreshold) {
      const suggestions = generatePriceChangeSuggestions(changePercent, competitor, rule.productName);
      const alert: AIAlert = {
        id: `alert_${Date.now()}_${generateSecureId(9)}`,
        type: 'competitor_price_change',
        severity: Math.abs(changePercent) > 15 ? 'high' : 'medium',
        title: 'Mudan√ßa de pre√ßo detectada',
        message: `${competitor.seller || 'Vendedor'} ${changePercent > 0 ? 'aumentou' : 'reduziu'} o pre√ßo em ${Math.abs(changePercent).toFixed(1)}%`,
        timestamp: new Date(),
        actionable: Math.abs(changePercent) > 20,
        suggestedAction: suggestions.length > 0 ? suggestions[0] : undefined,
        productId: rule.productName
      };

      alerts.push(alert);
    }
  }

  if (alerts.length > 0) {
    await processAlerts(alerts);
  }
}

/**
 * Gera sugest√µes baseadas em mudan√ßas de pre√ßo
 * 
 * Cria recomenda√ß√µes estrat√©gicas de acordo com a dire√ß√£o e magnitude
 * da mudan√ßa de pre√ßo detectada.
 * 
 * @param changePercent - Percentual de mudan√ßa (positivo = aumento, negativo = redu√ß√£o)
 * @param competitor - Dados do concorrente
 * @param productName - Nome do produto
 * @returns Array de sugest√µes acion√°veis
 * 
 * @example
 * ```typescript
 * const competitor: CompetitorPricing = {
 *   platform: CompetitorPlatform.MERCADO_LIVRE,
 *   seller: 'Magazine Luiza',
 *   price: 5799.00,
 *   url: 'https://...'
 * };
 * 
 * // Caso 1: Concorrente aumentou pre√ßo significativamente (+15%)
 * const suggestions1 = generatePriceChangeSuggestions(
 *   15,  // +15%
 *   competitor,
 *   'iPhone 15 Pro'
 * );
 * 
 * console.log('Concorrente aumentou +15%:');
 * suggestions1.forEach((s, i) => console.log(`${i + 1}. ${s}`));
 * // Output:
 * // 1. Oportunidade: concorrente aumentou pre√ßo - considere manter o seu para ganhar market share
 * // 2. Monitore se outros concorrentes seguir√£o o aumento
 * // 3. Revisar posicionamento de iPhone 15 Pro na plataforma mercado_livre
 * 
 * // Caso 2: Concorrente reduziu pre√ßo significativamente (-12%)
 * const suggestions2 = generatePriceChangeSuggestions(
 *   -12,  // -12%
 *   competitor,
 *   'iPhone 15 Pro'
 * );
 * 
 * console.log('\nConcorrente reduziu -12%:');
 * suggestions2.forEach((s, i) => console.log(`${i + 1}. ${s}`));
 * // Output:
 * // 1. Aten√ß√£o: concorrente reduziu pre√ßo significativamente
 * // 2. Avalie se deve acompanhar a redu√ß√£o ou diferenciar valor
 * // 3. Verifique se √© promo√ß√£o tempor√°ria ou mudan√ßa permanente
 * // 4. Revisar posicionamento de iPhone 15 Pro na plataforma mercado_livre
 * 
 * // Caso 3: Pequena mudan√ßa (+3%)
 * const suggestions3 = generatePriceChangeSuggestions(
 *   3,  // +3%
 *   competitor,
 *   'iPhone 15 Pro'
 * );
 * 
 * console.log('\nPequena mudan√ßa +3%:');
 * suggestions3.forEach((s, i) => console.log(`${i + 1}. ${s}`));
 * // Output:
 * // 1. Revisar posicionamento de iPhone 15 Pro na plataforma mercado_livre
 * // (Apenas sugest√£o gen√©rica - mudan√ßa n√£o √© significativa)
 * 
 * // Caso 4: Uso em alerta
 * const changePercent = -18.5;  // Queda de 18.5%
 * const allSuggestions = generatePriceChangeSuggestions(
 *   changePercent,
 *   competitor,
 *   'PlayStation 5'
 * );
 * 
 * const alert: AIAlert = {
 *   id: 'alert_123',
 *   type: 'competitor_price_change',
 *   severity: 'high',
 *   title: 'Mudan√ßa de pre√ßo detectada',
 *   message: `${competitor.seller} reduziu o pre√ßo em ${Math.abs(changePercent)}%`,
 *   timestamp: new Date(),
 *   actionable: true,
 *   suggestedAction: allSuggestions[0],  // Primeira sugest√£o
 *   productId: 'PlayStation 5'
 * };
 * 
 * console.log('\nAlerta criado com primeira sugest√£o:');
 * console.log(alert.suggestedAction);
 * // Output: Aten√ß√£o: concorrente reduziu pre√ßo significativamente
 * ```
 * 
 * @remarks
 * **L√≥gica de sugest√µes**:
 * 
 * 1. **Aumento significativo** (changePercent > 10%):
 *    - Oportunidade de ganhar market share mantendo pre√ßo
 *    - Monitorar se outros seguir√£o o movimento
 * 
 * 2. **Redu√ß√£o significativa** (changePercent < -10%):
 *    - Alertar sobre redu√ß√£o agressiva
 *    - Avaliar se deve acompanhar ou diferenciar
 *    - Verificar se √© promo√ß√£o ou mudan√ßa permanente
 * 
 * 3. **Sugest√£o gen√©rica** (sempre adicionada):
 *    - Revisar posicionamento na plataforma
 *    - Inclui nome do produto e plataforma
 * 
 * **Threshold de 10%**:
 * - Mudan√ßas < 10% ‚Üí apenas sugest√£o gen√©rica
 * - Mudan√ßas >= 10% ‚Üí sugest√µes espec√≠ficas + gen√©rica
 * 
 * **Ordem das sugest√µes**:
 * - Primeira: Mais acion√°vel/urgente
 * - √öltima: Gen√©rica (sempre presente)
 * 
 * **Uso em detectPriceChanges()**:
 * ```typescript
 * const suggestions = generatePriceChangeSuggestions(...);
 * alert.suggestedAction = suggestions.length > 0 ? suggestions[0] : undefined;
 * ```
 * 
 * **Personaliza√ß√£o**:
 * Voc√™ pode adicionar mais regras:
 * - Mudan√ßas extremas (> 30%)
 * - Categoria-espec√≠ficas
 * - Baseadas em hist√≥rico (tend√™ncias)
 * - Sazonalidade (Black Friday, etc.)
 * 
 * **Exemplos de personaliza√ß√£o**:
 * ```typescript
 * if (changePercent > 30) {
 *   suggestions.unshift('URGENTE: Mudan√ßa extrema detectada - revisar imediatamente');
 * }
 * 
 * if (competitor.platform === 'amazon' && changePercent < -15) {
 *   suggestions.push('Amazon geralmente puxa mercado - considere ajuste preventivo');
 * }
 * ```
 */
function generatePriceChangeSuggestions(
  changePercent: number,
  competitor: CompetitorPricing,
  productName: string
): string[] {
  const suggestions: string[] = [];

  if (changePercent > 10) {
    suggestions.push('Oportunidade: concorrente aumentou pre√ßo - considere manter o seu para ganhar market share');
    suggestions.push('Monitore se outros concorrentes seguir√£o o aumento');
  } else if (changePercent < -10) {
    suggestions.push('Aten√ß√£o: concorrente reduziu pre√ßo significativamente');
    suggestions.push('Avalie se deve acompanhar a redu√ß√£o ou diferenciar valor');
    suggestions.push('Verifique se √© promo√ß√£o tempor√°ria ou mudan√ßa permanente');
  }

  suggestions.push(`Revisar posicionamento de ${productName} na plataforma ${competitor.platform}`);
  
  return suggestions;
}

/**
 * Processa alertas gerados
 * 
 * Registra logs e envia alertas para cada mudan√ßa de pre√ßo detectada.
 * 
 * @param alerts - Array de alertas a processar
 * @returns Promise que resolve quando todos os alertas s√£o processados
 * 
 * @example
 * ```typescript
 * // Criar alguns alertas
 * const alerts: AIAlert[] = [
 *   {
 *     id: 'alert_1729368000_abc',
 *     type: 'competitor_price_change',
 *     severity: 'high',
 *     title: 'Mudan√ßa de pre√ßo detectada',
 *     message: 'Magazine Luiza reduziu o pre√ßo em 18.5%',
 *     timestamp: new Date(),
 *     actionable: false,
 *     suggestedAction: 'Aten√ß√£o: concorrente reduziu pre√ßo significativamente',
 *     productId: 'iPhone 15 Pro'
 *   },
 *   {
 *     id: 'alert_1729368001_xyz',
 *     type: 'competitor_price_change',
 *     severity: 'medium',
 *     title: 'Mudan√ßa de pre√ßo detectada',
 *     message: 'Amazon aumentou o pre√ßo em 12.3%',
 *     timestamp: new Date(),
 *     actionable: false,
 *     suggestedAction: 'Oportunidade: concorrente aumentou pre√ßo',
 *     productId: 'iPhone 15 Pro'
 *   }
 * ];
 * 
 * // Processar alertas
 * await processAlerts(alerts);
 * 
 * // Logs gerados:
 * // INFO: Alerta de concorr√™ncia gerado
 * //   {
 * //     alertId: 'alert_1729368000_abc',
 * //     type: 'competitor_price_change',
 * //     severity: 'high',
 * //     productId: 'iPhone 15 Pro'
 * //   }
 * // INFO: üö® ALERTA: Mudan√ßa de pre√ßo detectada - Magazine Luiza reduziu...
 * //
 * // INFO: Alerta de concorr√™ncia gerado
 * //   {
 * //     alertId: 'alert_1729368001_xyz',
 * //     type: 'competitor_price_change',
 * //     severity: 'medium',
 * //     productId: 'iPhone 15 Pro'
 * //   }
 * // INFO: üö® ALERTA: Mudan√ßa de pre√ßo detectada - Amazon aumentou...
 * ```
 * 
 * @remarks
 * **Pipeline de processamento**:
 * 
 * 1. **Para cada alerta**:
 *    - Registra log estruturado com `logger.info()`
 *    - Envia alerta via `sendAlert()`
 * 
 * 2. **Logging estruturado**:
 *    ```typescript
 *    logger.info('Alerta de concorr√™ncia gerado', {
 *      alertId: alert.id,
 *      type: alert.type,
 *      severity: alert.severity,
 *      productId: alert.productId
 *    });
 *    ```
 * 
 * 3. **Envio de alerta**:
 *    - Delegado para `sendAlert()`
 *    - Implementa√ß√£o atual: apenas log
 *    - Pode ser estendido para email, webhook, Slack, etc.
 * 
 * **Processamento sequencial**:
 * - Loop `for...of` processa um alerta por vez
 * - N√£o h√° paralelismo (garante ordem)
 * 
 * **Uso em produ√ß√£o**:
 * Esta fun√ß√£o √© chamada internamente por `detectPriceChanges()`
 * quando mudan√ßas significativas s√£o detectadas.
 * 
 * **Extens√£o futura**:
 * ```typescript
 * async function processAlerts(alerts: AIAlert[]): Promise<void> {
 *   for (const alert of alerts) {
 *     // 1. Log estruturado
 *     logger.info('Alerta de concorr√™ncia gerado', {...});
 *     
 *     // 2. Enviar alerta
 *     await sendAlert(alert);
 *     
 *     // 3. Salvar no banco
 *     await supabase.from('alerts').insert({
 *       id: alert.id,
 *       type: alert.type,
 *       severity: alert.severity,
 *       message: alert.message,
 *       product_id: alert.productId,
 *       created_at: alert.timestamp
 *     });
 *     
 *     // 4. Notificar usu√°rios (se severity = 'high')
 *     if (alert.severity === 'high') {
 *       await notifyUsers(alert);
 *     }
 *   }
 * }
 * ```
 */
async function processAlerts(alerts: AIAlert[]): Promise<void> {
  for (const alert of alerts) {
    logger.info('Alerta de concorr√™ncia gerado', {
      alertId: alert.id,
      type: alert.type,
      severity: alert.severity,
      productId: alert.productId
    });

    await sendAlert(alert);
  }
}

/**
 * Envia um alerta (implementa√ß√£o simulada)
 * 
 * Registra o alerta em logs. Pode ser estendido para enviar
 * notifica√ß√µes por email, webhook, Slack, etc.
 * 
 * @param alert - Alerta a ser enviado
 * @returns Promise que resolve quando envio completa
 * 
 * @example
 * ```typescript
 * const alert: AIAlert = {
 *   id: 'alert_123',
 *   type: 'competitor_price_change',
 *   severity: 'high',
 *   title: 'Mudan√ßa de pre√ßo detectada',
 *   message: 'Magazine Luiza reduziu o pre√ßo em 18.5%',
 *   timestamp: new Date(),
 *   actionable: true,
 *   suggestedAction: 'Aten√ß√£o: concorrente reduziu pre√ßo significativamente',
 *   productId: 'iPhone 15 Pro'
 * };
 * 
 * await sendAlert(alert);
 * 
 * // Log gerado:
 * // INFO: üö® ALERTA: Mudan√ßa de pre√ßo detectada - Magazine Luiza reduziu o pre√ßo em 18.5%
 * ```
 * 
 * @remarks
 * **Implementa√ß√£o atual**:
 * - Apenas registra log com `logger.info()`
 * - Formato: `üö® ALERTA: {title} - {message}`
 * 
 * **Extens√µes poss√≠veis**:
 * 
 * 1. **Email**:
 *    ```typescript
 *    await sendEmail({
 *      to: 'vendas@empresa.com',
 *      subject: alert.title,
 *      body: `
 *        ${alert.message}
 *        
 *        Severidade: ${alert.severity}
 *        Produto: ${alert.productId}
 *        A√ß√£o sugerida: ${alert.suggestedAction}
 *      `
 *    });
 *    ```
 * 
 * 2. **Slack**:
 *    ```typescript
 *    await fetch(process.env.SLACK_WEBHOOK_URL, {
 *      method: 'POST',
 *      body: JSON.stringify({
 *        text: `üö® *${alert.title}*`,
 *        attachments: [{
 *          color: alert.severity === 'high' ? 'danger' : 'warning',
 *          fields: [
 *            { title: 'Mensagem', value: alert.message },
 *            { title: 'Produto', value: alert.productId },
 *            { title: 'Sugest√£o', value: alert.suggestedAction }
 *          ]
 *        }]
 *      })
 *    });
 *    ```
 * 
 * 3. **Push notification**:
 *    ```typescript
 *    await sendPushNotification({
 *      title: alert.title,
 *      body: alert.message,
 *      data: {
 *        alertId: alert.id,
 *        productId: alert.productId,
 *        severity: alert.severity
 *      }
 *    });
 *    ```
 * 
 * 4. **Webhook**:
 *    ```typescript
 *    await fetch(process.env.ALERT_WEBHOOK_URL, {
 *      method: 'POST',
 *      headers: { 'Content-Type': 'application/json' },
 *      body: JSON.stringify(alert)
 *    });
 *    ```
 * 
 * **Uso interno**:
 * Esta fun√ß√£o √© chamada por `processAlerts()` para cada alerta individual.
 */
async function sendAlert(alert: AIAlert): Promise<void> {
  logger.info(`üö® ALERTA: ${alert.title} - ${alert.message}`);
}
