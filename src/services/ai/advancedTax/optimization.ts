/**
 * Advanced Tax Service - Tax Optimization Plans
 * Cria√ß√£o de planos de otimiza√ß√£o tribut√°ria personalizados
 */

import { TaxRegimeType } from '@/shared/types/ai';
import type { BusinessProfile, TaxOptimizationPlan, TaxScenario } from './types';

/**
 * Economia m√≠nima anual para justificar mudan√ßa de regime (R$)
 */
const MINIMUM_SAVINGS_THRESHOLD = 5000;

/**
 * Cria plano de otimiza√ß√£o tribut√°ria personalizado
 * 
 * Analisa cen√°rios alternativos e cria um plano detalhado de migra√ß√£o para
 * o regime tribut√°rio mais vantajoso, incluindo passos de implementa√ß√£o,
 * riscos, benef√≠cios e timeline.
 * 
 * @param businessProfile - Perfil completo do neg√≥cio
 * @param currentRegime - Regime tribut√°rio atual da empresa
 * @param scenarios - Todos os cen√°rios tribut√°rios calculados
 * @returns Plano de otimiza√ß√£o completo ou undefined se n√£o houver oportunidade
 * 
 * @example
 * ```typescript
 * const profile: BusinessProfile = { id: '123', /* ... */ };
 * const scenarios = await generateTaxScenarios(profile);
 * 
 * const plan = await createOptimizationPlan(
 *   profile,
 *   TaxRegimeType.LUCRO_PRESUMIDO, // Regime atual
 *   scenarios
 * );
 * 
 * if (plan) {
 *   console.log(`Economia anual: R$ ${plan.potentialSavingsAnnual.toFixed(2)}`);
 *   console.log(`Mudar de ${plan.currentRegime} para ${plan.recommendedRegime}`);
 *   console.log(`Timeline: ${plan.timeline}`);
 *   
 *   // Passos de implementa√ß√£o
 *   plan.implementationSteps.forEach(step => {
 *     console.log(`${step.step}. ${step.description} (${step.deadline})`);
 *   });
 * } else {
 *   console.log('Regime atual j√° √© o mais vantajoso');
 * }
 * ```
 * 
 * @remarks
 * **Crit√©rios para criar plano**:
 * - Deve existir regime alternativo vi√°vel
 * - Economia anual m√≠nima: R$ 5.000,00
 * - Regime alternativo deve ter menor carga tribut√°ria
 * 
 * **O que o plano inclui**:
 * - üìã Passos detalhados de implementa√ß√£o (4+ steps)
 * - ‚ö†Ô∏è Riscos identificados (mudan√ßa de legisla√ß√£o, car√™ncia, etc.)
 * - ‚úÖ Benef√≠cios quantificados (economia, redu√ß√£o de taxa, etc.)
 * - üìÖ Timeline realista (geralmente mudan√ßa s√≥ em janeiro)
 * 
 * **Retorna undefined quando**:
 * - Regime atual j√° √© o melhor
 * - Economia potencial < R$ 5.000/ano
 * - Nenhum regime alternativo √© vi√°vel
 * - Cen√°rio atual n√£o encontrado nos scenarios
 */
export async function createOptimizationPlan(
  businessProfile: BusinessProfile,
  currentRegime: TaxRegimeType,
  scenarios: TaxScenario[]
): Promise<TaxOptimizationPlan | undefined> {
  const currentScenario = scenarios.find(s => s.regime === currentRegime);

  if (!currentScenario) {
    return undefined;
  }

  // Encontra o melhor regime alternativo
  const viableAlternatives = scenarios.filter(
    s =>
      s.regime !== currentRegime &&
      s.viability === 'viable' &&
      s.annualTax < currentScenario.annualTax
  );

  if (viableAlternatives.length === 0) {
    return undefined;
  }

  const bestAlternative = viableAlternatives.reduce((best, scenario) =>
    scenario.annualTax < best.annualTax ? scenario : best,
    viableAlternatives[0]
  );

  const potentialSavings = currentScenario.annualTax - bestAlternative.annualTax;

  // S√≥ cria plano se a economia for significativa
  if (potentialSavings < MINIMUM_SAVINGS_THRESHOLD) {
    return undefined;
  }

  const planId = `tax_plan_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;

  return {
    id: planId,
    businessId: businessProfile.id,
    currentRegime,
    recommendedRegime: bestAlternative.regime,
    potentialSavingsAnnual: potentialSavings,
    implementationSteps: generateImplementationSteps(currentRegime, bestAlternative.regime),
    risks: identifyImplementationRisks(currentRegime, bestAlternative.regime),
    benefits: identifyImplementationBenefits(potentialSavings, bestAlternative),
    timeline: calculateImplementationTimeline(currentRegime, bestAlternative.regime),
    createdAt: new Date(),
  };
}

/**
 * Gera passos detalhados de implementa√ß√£o para mudan√ßa de regime
 * 
 * Cria um roadmap sequencial com prazos, respons√°veis e documentos necess√°rios
 * para migrar do regime atual para o regime recomendado.
 * 
 * @param currentRegime - Regime tribut√°rio atual
 * @param targetRegime - Regime tribut√°rio alvo
 * @returns Array com passos sequenciais incluindo prazos e documenta√ß√£o necess√°ria
 * 
 * @example
 * ```typescript
 * const steps = generateImplementationSteps(
 *   TaxRegimeType.LUCRO_PRESUMIDO,
 *   TaxRegimeType.SIMPLES_NACIONAL
 * );
 * 
 * steps.forEach(step => {
 *   console.log(`\nPasso ${step.step}: ${step.description}`);
 *   console.log(`Prazo: ${step.deadline}`);
 *   console.log(`Respons√°vel: ${step.responsible}`);
 *   console.log(`Documentos: ${step.documents.join(', ')}`);
 * });
 * ```
 * 
 * @remarks
 * **Passos padr√£o** (todos os regimes):
 * 1. **An√°lise de viabilidade** (15 dias)
 *    - Balancetes √∫ltimos 12 meses
 *    - DRE detalhada
 *    - Relat√≥rio de atividades
 * 
 * 2. **Regulariza√ß√£o fiscal** (30 dias)
 *    - Certid√µes negativas
 *    - Quita√ß√£o de d√©bitos
 *    - Regulariza√ß√£o cadastral
 * 
 * 3. **Ajuste de processos** (45 dias)
 *    - Novos procedimentos
 *    - Treinamento da equipe
 *    - Sistemas atualizados
 * 
 * **Passos espec√≠ficos**:
 * - Para **Simples Nacional**: Adiciona step de solicita√ß√£o de op√ß√£o (janeiro)
 * - Para outros regimes: Passos padr√£o aplicam-se
 * 
 * **Timeline**: Mudan√ßas de regime geralmente s√≥ ocorrem em janeiro do ano seguinte
 */
export function generateImplementationSteps(
  currentRegime: TaxRegimeType,
  targetRegime: TaxRegimeType
): Array<{
  step: number;
  description: string;
  deadline: string;
  responsible: string;
  documents: string[];
}> {
  const baseSteps = [
    {
      step: 1,
      description: 'An√°lise detalhada da viabilidade com contador',
      deadline: '15 dias',
      responsible: 'Contador/Consultor fiscal',
      documents: ['Balancetes √∫ltimos 12 meses', 'DRE detalhada', 'Relat√≥rio de atividades'],
    },
    {
      step: 2,
      description: 'Regulariza√ß√£o de pend√™ncias fiscais',
      deadline: '30 dias',
      responsible: 'Setor fiscal',
      documents: ['Certid√µes negativas', 'Quita√ß√£o de d√©bitos', 'Regulariza√ß√£o cadastral'],
    },
    {
      step: 3,
      description: 'Ajuste de processos internos',
      deadline: '45 dias',
      responsible: 'Equipe interna',
      documents: ['Novos procedimentos', 'Treinamento equipe', 'Sistemas atualizados'],
    },
  ];

  if (targetRegime === TaxRegimeType.SIMPLES_NACIONAL) {
    baseSteps.push({
      step: 4,
      description: 'Solicita√ß√£o de op√ß√£o pelo Simples Nacional',
      deadline: 'Janeiro do ano seguinte',
      responsible: 'Contador',
      documents: ['Formul√°rio de op√ß√£o', 'Documentos societ√°rios', 'Termo de op√ß√£o'],
    });
  }

  return baseSteps;
}

/**
 * Identifica riscos da mudan√ßa de regime tribut√°rio
 * 
 * Lista os principais riscos e desafios associados √† migra√ß√£o para
 * um novo regime fiscal, incluindo riscos gerais e espec√≠ficos do regime alvo.
 * 
 * @param currentRegime - Regime tribut√°rio atual
 * @param targetRegime - Regime tribut√°rio alvo
 * @returns Array com descri√ß√£o dos riscos identificados
 * 
 * @example
 * ```typescript
 * const risks = identifyImplementationRisks(
 *   TaxRegimeType.LUCRO_PRESUMIDO,
 *   TaxRegimeType.LUCRO_REAL
 * );
 * 
 * console.log('‚ö†Ô∏è Riscos da mudan√ßa:');
 * risks.forEach((risk, i) => {
 *   console.log(`${i + 1}. ${risk}`);
 * });
 * // Output:
 * // 1. Per√≠odo de car√™ncia para mudan√ßa (geralmente 1 ano)
 * // 2. Maior complexidade operacional
 * // 3. Necessidade de estrutura fiscal mais robusta
 * // ...
 * ```
 * 
 * @remarks
 * **Riscos comuns** (todos os regimes):
 * - Per√≠odo de car√™ncia de 1 ano
 * - Poss√≠vel aumento de obriga√ß√µes acess√≥rias
 * - Necessidade de adequa√ß√£o de sistemas
 * - Risco de mudan√ßas na legisla√ß√£o
 * 
 * **Riscos espec√≠ficos**:
 * 
 * **Simples Nacional**:
 * - Limita√ß√£o de faturamento futuro (teto R$ 4.8M)
 * - Restri√ß√µes para algumas atividades
 * 
 * **Lucro Real**:
 * - Maior complexidade operacional
 * - Necessidade de estrutura fiscal robusta
 * - Custos mais altos de compliance
 */
export function identifyImplementationRisks(
  currentRegime: TaxRegimeType,
  targetRegime: TaxRegimeType
): string[] {
  const risks: string[] = [
    'Per√≠odo de car√™ncia para mudan√ßa (geralmente 1 ano)',
    'Poss√≠vel aumento de obriga√ß√µes acess√≥rias',
    'Necessidade de adequa√ß√£o de sistemas',
    'Risco de mudan√ßas na legisla√ß√£o',
  ];

  if (targetRegime === TaxRegimeType.SIMPLES_NACIONAL) {
    risks.push('Limita√ß√£o de faturamento futuro');
    risks.push('Restri√ß√µes para algumas atividades');
  }

  if (targetRegime === TaxRegimeType.LUCRO_REAL) {
    risks.push('Maior complexidade operacional');
    risks.push('Necessidade de estrutura fiscal mais robusta');
  }

  return risks;
}

/**
 * Identifica benef√≠cios quantificados da mudan√ßa de regime
 * 
 * Lista todos os benef√≠cios da migra√ß√£o, incluindo economia financeira,
 * redu√ß√£o de carga tribut√°ria e vantagens operacionais do regime alvo.
 * 
 * @param savings - Economia anual total em reais
 * @param targetScenario - Cen√°rio completo do regime tribut√°rio alvo
 * @returns Array com descri√ß√£o dos benef√≠cios identificados
 * 
 * @example
 * ```typescript
 * const targetScenario: TaxScenario = {
 *   regime: TaxRegimeType.SIMPLES_NACIONAL,
 *   annualTax: 48000,
 *   effectiveRate: 6.0,
 *   pros: ['Menor carga tribut√°ria', 'Simplifica√ß√£o'],
 *   // ...
 * };
 * 
 * const benefits = identifyImplementationBenefits(
 *   15000, // R$ 15k de economia
 *   targetScenario
 * );
 * 
 * console.log('‚úÖ Benef√≠cios:');
 * benefits.forEach(benefit => console.log(`  - ${benefit}`));
 * // Output:
 * // - Economia anual de R$ 15,000.00
 * // - Redu√ß√£o da carga tribut√°ria para 6.00%
 * // - Melhoria do fluxo de caixa
 * // - Recursos liberados para investimento
 * // - Menor carga tribut√°ria geral
 * // - Simplifica√ß√£o de obriga√ß√µes
 * ```
 * 
 * @remarks
 * **Benef√≠cios financeiros** (sempre inclu√≠dos):
 * - Economia anual formatada em R$
 * - Redu√ß√£o percentual da carga tribut√°ria
 * - Melhoria do fluxo de caixa
 * - Recursos liberados para investimento
 * 
 * **Benef√≠cios operacionais**:
 * Inclui automaticamente todos os `pros` do regime alvo, que podem ser:
 * - Simplifica√ß√£o de processos
 * - Menos obriga√ß√µes acess√≥rias
 * - Maior flexibilidade fiscal
 * - Acesso a incentivos espec√≠ficos
 */
export function identifyImplementationBenefits(
  savings: number,
  targetScenario: TaxScenario
): string[] {
  const benefits: string[] = [
    `Economia anual de R$ ${savings.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`,
    `Redu√ß√£o da carga tribut√°ria para ${targetScenario.effectiveRate.toFixed(2)}%`,
    'Melhoria do fluxo de caixa',
    'Recursos liberados para investimento',
  ];

  benefits.push(...targetScenario.pros);

  return benefits;
}

/**
 * Calcula timeline realista de implementa√ß√£o da mudan√ßa de regime
 * 
 * Determina quando a mudan√ßa pode ser efetivada considerando que altera√ß√µes
 * de regime tribut√°rio geralmente s√≥ s√£o permitidas em janeiro do ano seguinte.
 * 
 * @param _currentRegime - Regime tribut√°rio atual (n√£o usado atualmente)
 * @param _targetRegime - Regime tribut√°rio alvo (n√£o usado atualmente)
 * @returns String descritiva com o m√™s/ano de implementa√ß√£o e tempo de prepara√ß√£o
 * 
 * @example
 * ```typescript
 * // Em maio de 2025
 * const timeline1 = calculateImplementationTimeline(
 *   TaxRegimeType.LUCRO_PRESUMIDO,
 *   TaxRegimeType.SIMPLES_NACIONAL
 * );
 * console.log(timeline1);
 * // "Implementa√ß√£o em janeiro de 2026 (7 meses para prepara√ß√£o)"
 * 
 * // Em dezembro de 2025
 * const timeline2 = calculateImplementationTimeline(
 *   TaxRegimeType.LUCRO_REAL,
 *   TaxRegimeType.LUCRO_PRESUMIDO
 * );
 * console.log(timeline2);
 * // "Implementa√ß√£o em janeiro de 2027 (prepara√ß√£o durante 2026)"
 * ```
 * 
 * @remarks
 * **Regra geral**: Mudan√ßa de regime s√≥ pode ocorrer em **janeiro**
 * 
 * **C√°lculo do timeline**:
 * - Se antes de **dezembro**: Implementa√ß√£o em janeiro do ano seguinte
 * - Se em **dezembro**: Implementa√ß√£o pulada para janeiro do ano +2
 *   (para dar tempo adequado de prepara√ß√£o)
 * 
 * **Tempo de prepara√ß√£o**:
 * - Mostra quantos meses faltam at√© a implementa√ß√£o
 * - Se em dezembro, sugere "prepara√ß√£o durante [ano seguinte]"
 * 
 * **Observa√ß√£o**: Os par√¢metros de regime n√£o s√£o usados atualmente,
 * mas est√£o na assinatura para futuras regras espec√≠ficas por regime.
 */
export function calculateImplementationTimeline(
  _currentRegime: TaxRegimeType,
  _targetRegime: TaxRegimeType
): string {
  const now = new Date();
  const currentYear = now.getFullYear();
  const nextYear = currentYear + 1;

  if (now.getMonth() < 11) {
    // Antes de dezembro
    return `Implementa√ß√£o em janeiro de ${nextYear} (${12 - now.getMonth()} meses para prepara√ß√£o)`;
  }

  return `Implementa√ß√£o em janeiro de ${nextYear + 1} (prepara√ß√£o durante ${nextYear})`;
}
