/**
 * Advanced Tax Service - Main Module
 * Servi√ßo de an√°lise tribut√°ria avan√ßada e personalizada
 */

import { type TaxAnalysis, TaxRegimeType } from '@/shared/types/ai';
import { taxService } from '../taxService';
import { logger, toErrorContext } from '../logger';

// Import dos m√≥dulos refatorados
import type {
  BusinessProfile,
  ComprehensiveTaxAnalysisResult,
  TaxOptimizationPlan,
  TaxScenario,
} from './types';
import { generateTaxScenarios } from './scenarios';
import { createOptimizationPlan } from './optimization';
import { generateTaxForecast } from './forecast';

/**
 * Servi√ßo de an√°lise tribut√°ria avan√ßada com suporte a m√∫ltiplos regimes fiscais
 * 
 * @remarks
 * Este servi√ßo oferece an√°lises tribut√°rias completas incluindo:
 * - An√°lise do regime atual
 * - Compara√ß√£o com regimes alternativos
 * - Planos de otimiza√ß√£o fiscal
 * - Proje√ß√µes de economia
 * - Recomenda√ß√µes estrat√©gicas
 */
class AdvancedTaxService {
  private readonly businessProfiles: Map<string, BusinessProfile> = new Map();
  private readonly optimizationPlans: Map<string, TaxOptimizationPlan> = new Map();

  /**
   * Realiza uma an√°lise tribut√°ria completa e personalizada para um neg√≥cio
   * 
   * @param businessProfile - Perfil completo do neg√≥cio com dados fiscais e operacionais
   * @returns Resultado completo da an√°lise incluindo cen√°rios, otimiza√ß√µes e proje√ß√µes
   * @throws Error se a an√°lise falhar por dados inv√°lidos ou problemas de c√°lculo
   * 
   * @example
   * ```typescript
   * const profile: BusinessProfile = {
   *   id: 'business-123',
   *   businessType: 'comercio',
   *   monthlyRevenue: 50000,
   *   employeeCount: 5,
   *   hasManufacturing: false,
   *   hasExports: false,
   *   hasImports: false,
   *   location: { state: 'SP', city: 'S√£o Paulo' },
   *   mainActivities: ['Com√©rcio varejista'],
   *   seasonality: 'medium'
   * };
   * 
   * const analysis = await advancedTaxService.performComprehensiveTaxAnalysis(profile);
   * console.log(`Regime atual: ${analysis.currentAnalysis.regime}`);
   * console.log(`Cen√°rios analisados: ${analysis.scenarios.length}`);
   * ```
   * 
   * @remarks
   * A an√°lise inclui:
   * 1. Avalia√ß√£o do regime atual (Simples, Presumido ou Real)
   * 2. Gera√ß√£o de cen√°rios alternativos com diferentes regimes
   * 3. Plano de otimiza√ß√£o se houver oportunidade de economia
   * 4. Proje√ß√£o financeira para 12 meses
   * 5. Recomenda√ß√µes estrat√©gicas personalizadas
   */
  async performComprehensiveTaxAnalysis(
    businessProfile: BusinessProfile
  ): Promise<ComprehensiveTaxAnalysisResult> {
    try {
      const startTime = Date.now();

      // 1. An√°lise do regime atual
      const currentAnalysis = await this.analyzeCurrentRegime(businessProfile);

      // 2. Cen√°rios alternativos
      const scenarios = await generateTaxScenarios(businessProfile);

      // 3. Plano de otimiza√ß√£o (se houver oportunidade)
      const currentRegime = this.getCurrentRegime(businessProfile);
      const optimizationPlan = await createOptimizationPlan(
        businessProfile,
        currentRegime,
        scenarios
      );

      // Salva o plano se foi criado
      if (optimizationPlan) {
        this.optimizationPlans.set(optimizationPlan.id, optimizationPlan);
      }

      // 4. Proje√ß√µes futuras
      const forecast = await generateTaxForecast(businessProfile, currentRegime);

      // 5. Recomenda√ß√µes estrat√©gicas
      const strategicRecommendations = this.generateStrategicRecommendations(
        businessProfile,
        scenarios,
        forecast
      );

      const duration = Date.now() - startTime;
      logger.trackAIUsage('comprehensive_tax_analysis', duration, true, {
        businessId: businessProfile.id,
        currentRegime,
        potentialSavings: optimizationPlan?.potentialSavingsAnnual || 0,
      });

      return {
        currentAnalysis,
        scenarios,
        optimizationPlan,
        forecast,
        strategicRecommendations,
      };
    } catch (error) {
      logger.trackAIError('comprehensive_tax_analysis', toErrorContext(error), {
        businessProfileId: businessProfile.id,
        businessType: businessProfile.businessType
      });
      throw new Error('Erro ao realizar an√°lise tribut√°ria abrangente');
    }
  }

  /**
   * Analisa o regime tribut√°rio atual
   */
  private async analyzeCurrentRegime(businessProfile: BusinessProfile): Promise<TaxAnalysis> {
    const currentRegime = this.getCurrentRegime(businessProfile);

    return await taxService.analyzeTaxOptimization({
      currentRegime,
      monthlyRevenue: businessProfile.monthlyRevenue,
      businessType: businessProfile.businessType,
      employeeCount: businessProfile.employeeCount,
      hasManufacturing: businessProfile.hasManufacturing,
    });
  }

  /**
   * Determina o regime tribut√°rio atual baseado no perfil
   */
  private getCurrentRegime(businessProfile: BusinessProfile): TaxRegimeType {
    const annualRevenue = businessProfile.monthlyRevenue * 12;

    // L√≥gica simplificada para determinar regime atual
    if (annualRevenue <= 4_800_000) {
      return TaxRegimeType.SIMPLES_NACIONAL;
    }

    if (annualRevenue <= 78_000_000) {
      return TaxRegimeType.LUCRO_PRESUMIDO;
    }

    return TaxRegimeType.LUCRO_REAL;
  }

  /**
   * Gera recomenda√ß√µes estrat√©gicas personalizadas
   */
  private generateStrategicRecommendations(
    businessProfile: BusinessProfile,
    scenarios: TaxScenario[],
    _forecast: import('./types').TaxForecast
  ): string[] {
    const recommendations: string[] = [];

    // Recomenda√ß√£o baseada no melhor cen√°rio
    const bestScenario = scenarios.reduce(
      (best, scenario) => (scenario.annualTax < best.annualTax ? scenario : best),
      scenarios[0]
    );

    const currentRegime = this.getCurrentRegime(businessProfile);
    if (bestScenario.regime !== currentRegime) {
      const currentScenario = scenarios.find(s => s.regime === currentRegime);
      if (currentScenario) {
        const savings = currentScenario.annualTax - bestScenario.annualTax;
        recommendations.push(
          `üéØ Considere migrar para ${bestScenario.regime} - economia de R$ ${savings.toLocaleString('pt-BR')}/ano`
        );
      }
    }

    // Recomenda√ß√µes baseadas no perfil
    if (businessProfile.employeeCount > 20 && !businessProfile.hasManufacturing) {
      recommendations.push('üë• Avalie benef√≠cios fiscais para contrata√ß√£o de jovens aprendizes');
    }

    if (businessProfile.businessType === 'industria') {
      recommendations.push('üè≠ Explore incentivos fiscais regionais para ind√∫stria');
    }

    if (businessProfile.monthlyRevenue > 100_000) {
      recommendations.push('üìä Considere consultoria especializada em planejamento tribut√°rio');
    }

    return recommendations;
  }

  /**
   * Obt√©m plano de otimiza√ß√£o por ID
   */
  getOptimizationPlan(planId: string): TaxOptimizationPlan | undefined {
    return this.optimizationPlans.get(planId);
  }

  /**
   * Lista todos os planos de otimiza√ß√£o
   */
  getAllOptimizationPlans(): TaxOptimizationPlan[] {
    return Array.from(this.optimizationPlans.values());
  }

  /**
   * Salva perfil empresarial
   */
  saveBusinessProfile(profile: BusinessProfile): void {
    this.businessProfiles.set(profile.id, profile);
    logger.info('Perfil empresarial salvo', { businessId: profile.id });
  }

  /**
   * Obt√©m perfil empresarial
   */
  getBusinessProfile(businessId: string): BusinessProfile | undefined {
    return this.businessProfiles.get(businessId);
  }
}

// Exporta inst√¢ncia singleton
export const advancedTaxService = new AdvancedTaxService();

// Re-exports dos tipos para facilitar imports
export type {
  BusinessProfile,
  TaxOptimizationPlan,
  TaxScenario,
  TaxForecast,
  ComprehensiveTaxAnalysisResult,
} from './types';
