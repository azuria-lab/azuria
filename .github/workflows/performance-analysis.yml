name: Performance Analysis & Reporting

on:
    pull_request:
        branches: [main]
        types: [opened, synchronize, ready_for_review]
    push:
        branches: [main]
    schedule:
        # Executar análise de performance diária às 02:00 UTC
        - cron: "0 2 * * *"
    workflow_dispatch:

permissions:
    contents: read
    pull-requests: write
    checks: write
    actions: read

concurrency:
    group: performance-${{ github.ref }}
    cancel-in-progress: true

env:
    NODE_VERSION: "20"

jobs:
    bundle-analysis:
        name: Bundle Size Analysis
        runs-on: ubuntu-latest
        outputs:
            has-regression: ${{ steps.regression-check.outputs.has-regression }}
            report-path: ${{ steps.generate-report.outputs.report-path }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Necessário para comparar com branch base

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Generate bundle analysis
              run: |
                  npm run -s build
                  npm run -s analyze
                  npm run -s build:next
                  npm run -s analyze:next
              env:
                  ANALYZE: true

            - name: Check for bundle regression
              id: regression-check
              run: |
                  HAS_REGRESSION=$(node scripts/check-bundle-regression.mjs --json | jq -r '.hasRegression // false')
                  echo "has-regression=$HAS_REGRESSION" >> $GITHUB_OUTPUT
              continue-on-error: true

            - name: Generate performance report
              id: generate-report
              run: |
                  # Criar relatório de performance em markdown
                  cat > performance-report.md << 'EOF'
                  # 📊 Performance Analysis Report

                  ## Bundle Size Analysis

                  \`\`\`bash
                  npm run analyze
                  \`\`\`

                  $(node scripts/check-bundle-regression.mjs --markdown)

                  ## Performance Metrics

                  - **Main Chunk**: Optimized for fast initial load
                  - **Vendor Chunk**: Third-party dependencies
                  - **Dynamic Imports**: Code splitting analysis

                  ## Recommendations

                  $(node scripts/generate-performance-recommendations.mjs)

                  ---
                  *Report generated on $(date -u)*
                  EOF

                  echo "report-path=performance-report.md" >> $GITHUB_OUTPUT

            - name: Upload bundle analysis artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: bundle-analysis-${{ github.sha }}
                  path: |
                      bundle-visualizer.html
                      .next/analyze/
                      performance-report.md
                  retention-days: 30

            - name: Comment PR with bundle analysis
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      const report = fs.readFileSync('performance-report.md', 'utf8');

                      const comments = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number
                      });

                      const botComment = comments.data.find(comment => 
                        comment.user.type === 'Bot' && 
                        comment.body.includes('📊 Performance Analysis Report')
                      );

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: report
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: report
                        });
                      }

    web-vitals-monitoring:
        name: 📊 Web Vitals & Budget Monitoring
        runs-on: ubuntu-latest
        needs: [bundle-analysis]
        outputs:
            vitals-score: ${{ steps.vitals.outputs.vitals-score }}
            budget-score: ${{ steps.budget.outputs.budget-score }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Monitor Web Vitals
              id: vitals
              run: |
                  echo "🔄 Running Web Vitals monitoring..."
                  node scripts/monitor-web-vitals.mjs

                  # Extract score from report
                  if [ -f .vitals-data/latest-report.json ]; then
                    VITALS_SCORE=$(cat .vitals-data/latest-report.json | jq -r '.summary.overall_score // 0')
                    echo "vitals-score=$VITALS_SCORE" >> $GITHUB_OUTPUT
                    echo "Web Vitals Score: $VITALS_SCORE%"
                  else
                    echo "vitals-score=0" >> $GITHUB_OUTPUT
                    echo "⚠️ Web Vitals report not found"
                  fi

            - name: Monitor Performance Budget
              id: budget
              run: |
                  echo "🔄 Running Performance Budget monitoring..."

                  # Test different page types
                  for page_type in homepage calculator dashboard; do
                    echo "Testing $page_type..."
                    node scripts/monitor-performance-budget.mjs $page_type
                  done

                  # Extract budget score
                  if [ -f .performance-budget/budget-report.json ]; then
                    BUDGET_SCORE=$(cat .performance-budget/budget-report.json | jq -r '.summary.budget_score // 0')
                    echo "budget-score=$BUDGET_SCORE" >> $GITHUB_OUTPUT
                    echo "Performance Budget Score: $BUDGET_SCORE%"
                  else
                    echo "budget-score=0" >> $GITHUB_OUTPUT
                    echo "⚠️ Budget report not found"
                  fi

            - name: Upload Web Vitals artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: web-vitals-${{ github.sha }}
                  path: |
                      .vitals-data/
                      .performance-budget/
                      performance-budget.config.json

    lighthouse-audit:
        name: 🔍 Lighthouse Performance Audit
        runs-on: ubuntu-latest
        needs: [bundle-analysis, web-vitals-monitoring]
        outputs:
            lighthouse-score: ${{ steps.audit.outputs.lighthouse-score }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Serve application
              run: |
                  npm install -g serve
                  serve -s dist -p 3000 &
                  sleep 5

            - name: Install Lighthouse CI
              run: npm install -g @lhci/cli

            - name: Run Lighthouse audit
              run: |
                  lhci autorun --collect.url=http://localhost:3000 --collect.numberOfRuns=3
              continue-on-error: true

            - name: Upload Lighthouse results
              uses: actions/upload-artifact@v4
              with:
                  name: lighthouse-results-${{ github.sha }}
                  path: .lighthouseci/
                  retention-days: 30

    security-analysis:
        name: Security & Dependency Analysis
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run security audit
              run: |
                  npm audit --audit-level high
                  npm run -s audit:fix 2>/dev/null || echo "No auto-fixable vulnerabilities"
              continue-on-error: true

            - name: Check for outdated dependencies
              run: |
                  echo "## 📦 Dependency Status" > dependency-report.md
                  echo "" >> dependency-report.md
                  echo "### Outdated packages:" >> dependency-report.md
                  echo "\`\`\`" >> dependency-report.md
                  npm outdated || echo "All dependencies up to date"
                  echo "\`\`\`" >> dependency-report.md

            - name: Upload security report
              uses: actions/upload-artifact@v4
              with:
                  name: security-analysis-${{ github.sha }}
                  path: dependency-report.md
                  retention-days: 30

    performance-summary:
        name: 📋 Performance Summary
        runs-on: ubuntu-latest
        needs:
            [
                bundle-analysis,
                web-vitals-monitoring,
                lighthouse-audit,
                security-analysis,
            ]
        if: always()
        steps:
            - name: Download all reports
              uses: actions/download-artifact@v4
              with:
                  path: ./reports

            - name: Generate summary
              run: |
                  echo "# 🚀 Performance Analysis Summary" > summary.md
                  echo "" >> summary.md
                  echo "**Commit:** ${{ github.sha }}" >> summary.md
                  echo "**Branch:** ${{ github.ref_name }}" >> summary.md
                  echo "**Timestamp:** $(date -u)" >> summary.md
                  echo "" >> summary.md

                  if [ "${{ needs.bundle-analysis.outputs.has-regression }}" = "true" ]; then
                    echo "⚠️ **Bundle size regression detected**" >> summary.md
                  else
                    echo "✅ **Bundle size within acceptable limits**" >> summary.md
                  fi

                  echo "" >> summary.md
                  echo "## 📊 Analysis Results:" >> summary.md
                  echo "" >> summary.md
                  echo "- Bundle Analysis: ${{ needs.bundle-analysis.result }}" >> summary.md
                  echo "- Lighthouse Audit: ${{ needs.lighthouse-audit.result }}" >> summary.md
                  echo "- Web Vitals Monitoring: ${{ needs.web-vitals-monitoring.result }}" >> summary.md  
                  echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> summary.md
                  echo "" >> summary.md
                  echo "Check individual artifacts for detailed reports." >> summary.md

            - name: Upload summary
              uses: actions/upload-artifact@v4
              with:
                  name: performance-summary-${{ github.sha }}
                  path: summary.md
                  retention-days: 90

            - name: Set check status
              uses: actions/github-script@v7
              with:
                  script: |
                      const hasRegression = '${{ needs.bundle-analysis.outputs.has-regression }}' === 'true';
                      const status = hasRegression ? 'failure' : 'success';
                      const conclusion = hasRegression ? 'Bundle size regression detected' : 'Performance analysis passed';

                      await github.rest.checks.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        name: 'Performance Analysis',
                        head_sha: context.sha,
                        status: 'completed',
                        conclusion: status,
                        output: {
                          title: conclusion,
                          summary: `Performance analysis completed for commit ${context.sha}`
                        }
                      });
